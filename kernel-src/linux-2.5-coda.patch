diff -urN --exclude-from=dontdiff linux-2.5.63/fs/coda/cache.c linux-2.5.63-coda/fs/coda/cache.c
--- linux-2.5.63/fs/coda/cache.c	2002-12-17 21:09:56.000000000 -0500
+++ linux-2.5.63-coda/fs/coda/cache.c	2003-02-27 11:52:35.000000000 -0500
@@ -28,8 +28,8 @@
 {
 	struct coda_inode_info *cii = ITOC(inode);
 
-        if ( !coda_cred_ok(&cii->c_cached_cred) ) {
-                coda_load_creds(&cii->c_cached_cred);
+        if ( cii->c_uid != current->fsuid ) {
+		cii->c_uid = current->fsuid;
                 cii->c_cached_perm = mask;
         } else
                 cii->c_cached_perm |= mask;
@@ -43,7 +43,7 @@
 }
 
 /* remove all acl caches for a principal (or all principals when cred == NULL)*/
-void coda_cache_clear_all(struct super_block *sb, struct coda_cred *cred)
+void coda_cache_clear_all(struct super_block *sb, uid_t *uid)
 {
         struct coda_sb_info *sbi;
         struct coda_inode_info *cii;
@@ -55,7 +55,7 @@
         list_for_each(tmp, &sbi->sbi_cihead)
         {
 		cii = list_entry(tmp, struct coda_inode_info, c_cilist);
-                if (!cred || coda_cred_eq(cred, &cii->c_cached_cred))
+                if (!uid || *uid == cii->c_uid)
                         cii->c_cached_perm = 0;
 	}
 }
@@ -67,8 +67,8 @@
 	struct coda_inode_info *cii = ITOC(inode);
         int hit;
 	
-        hit = ((mask & cii->c_cached_perm) == mask) &&
-                coda_cred_ok(&cii->c_cached_cred);
+        hit = ((mask & cii->c_cached_perm) == mask &&
+	       cii->c_uid == current->fsuid);
 
         return hit;
 }
diff -urN --exclude-from=dontdiff linux-2.5.63/fs/coda/cnode.c linux-2.5.63-coda/fs/coda/cnode.c
--- linux-2.5.63/fs/coda/cnode.c	2002-12-17 21:09:56.000000000 -0500
+++ linux-2.5.63-coda/fs/coda/cnode.c	2003-02-27 11:52:35.000000000 -0500
@@ -11,18 +11,11 @@
 #include <linux/coda_fs_i.h>
 #include <linux/coda_psdev.h>
 
-inline int coda_fideq(ViceFid *fid1, ViceFid *fid2)
-{
-	if (fid1->Vnode != fid2->Vnode)   return 0;
-	if (fid1->Volume != fid2->Volume) return 0;
-	if (fid1->Unique != fid2->Unique) return 0;
-	return 1;
-}
+const static CodaFid NullFid;
 
-inline int coda_isnullfid(ViceFid *fid)
+inline int coda_fideq(CodaFid *fid1, CodaFid *fid2)
 {
-	if (fid->Vnode || fid->Volume || fid->Unique) return 0;
-	return 1;
+	return memcmp(fid1, fid2, sizeof(CodaFid)) == 0;
 }
 
 static struct inode_operations coda_symlink_inode_operations = {
@@ -52,13 +45,13 @@
 
 static int coda_test_inode(struct inode *inode, void *data)
 {
-	ViceFid *fid = (ViceFid *)data;
+	CodaFid *fid = (CodaFid *)data;
 	return coda_fideq(&(ITOC(inode)->c_fid), fid);
 }
 
 static int coda_set_inode(struct inode *inode, void *data)
 {
-	ViceFid *fid = (ViceFid *)data;
+	CodaFid *fid = (CodaFid *)data;
 	ITOC(inode)->c_fid = *fid;
 	return 0;
 }
@@ -68,7 +61,7 @@
 	return -1;
 }
 
-struct inode * coda_iget(struct super_block * sb, ViceFid * fid,
+struct inode * coda_iget(struct super_block * sb, CodaFid * fid,
 			 struct coda_vattr * attr)
 {
 	struct inode *inode;
@@ -101,7 +94,7 @@
    - link the two up if this is needed
    - fill in the attributes
 */
-int coda_cnode_make(struct inode **inode, ViceFid *fid, struct super_block *sb)
+int coda_cnode_make(struct inode **inode, CodaFid *fid, struct super_block *sb)
 {
         struct coda_vattr attr;
         int error;
@@ -122,8 +115,7 @@
 }
 
 
-void coda_replace_fid(struct inode *inode, struct ViceFid *oldfid, 
-		      struct ViceFid *newfid)
+void coda_replace_fid(struct inode *inode, CodaFid *oldfid, CodaFid *newfid)
 {
 	struct coda_inode_info *cii;
 	unsigned long hash = coda_f2i(newfid);
@@ -142,7 +134,7 @@
 }
 
 /* convert a fid to an inode. */
-struct inode *coda_fid_to_inode(ViceFid *fid, struct super_block *sb) 
+struct inode *coda_fid_to_inode(CodaFid *fid, struct super_block *sb) 
 {
 	struct inode *inode;
 	unsigned long hash = coda_f2i(fid);
diff -urN --exclude-from=dontdiff linux-2.5.63/fs/coda/coda_linux.c linux-2.5.63-coda/fs/coda/coda_linux.c
--- linux-2.5.63/fs/coda/coda_linux.c	2002-12-17 21:09:56.000000000 -0500
+++ linux-2.5.63-coda/fs/coda/coda_linux.c	2003-02-27 11:52:35.000000000 -0500
@@ -26,10 +26,11 @@
 int coda_fake_statfs;
 
 /* print a fid */
-char * coda_f2s(ViceFid *f)
+char * coda_f2s(CodaFid *f)
 {
 	static char s[60];
-	sprintf(s, "(%-#lx.%-#lx.%-#lx)", f->Volume, f->Vnode, f->Unique);
+	sprintf(s, "(%08x.%08x.%08x.%08x)",
+		f->opaque[0], f->opaque[1], f->opaque[2], f->opaque[3]);
 	return s;
 }
 
@@ -46,30 +47,6 @@
     return ( i->i_sb->s_root->d_inode == i );
 }
 
-/* put the current process credentials in the cred */
-void coda_load_creds(struct coda_cred *cred)
-{
-        cred->cr_uid = (vuid_t) current->uid;
-        cred->cr_euid = (vuid_t) current->euid;
-        cred->cr_suid = (vuid_t) current->suid;
-        cred->cr_fsuid = (vuid_t) current->fsuid;
-
-        cred->cr_groupid = (vgid_t) current->gid;
-        cred->cr_egid = (vgid_t) current->egid;
-        cred->cr_sgid = (vgid_t) current->sgid;
-        cred->cr_fsgid = (vgid_t) current->fsgid;
-}
-
-int coda_cred_ok(struct coda_cred *cred)
-{
-	return(current->fsuid == cred->cr_fsuid);
-}
-
-int coda_cred_eq(struct coda_cred *cred1, struct coda_cred *cred2)
-{
-	return (cred1->cr_fsuid == cred2->cr_fsuid);
-}
-
 unsigned short coda_flags_to_cflags(unsigned short flags)
 {
 	unsigned short coda_flags = 0;
@@ -158,8 +135,8 @@
 
         /* clean out */        
         vattr->va_mode = (umode_t) -1;
-        vattr->va_uid = (vuid_t) -1; 
-        vattr->va_gid = (vgid_t) -1;
+        vattr->va_uid = (uid_t) -1; 
+        vattr->va_gid = (gid_t) -1;
         vattr->va_size = (off_t) -1;
 	vattr->va_atime.tv_sec = (time_t) -1;
 	vattr->va_atime.tv_nsec =  (time_t) -1;
@@ -197,10 +174,10 @@
                 vattr->va_mode = iattr->ia_mode;
 	}
         if ( valid & ATTR_UID ) {
-                vattr->va_uid = (vuid_t) iattr->ia_uid;
+                vattr->va_uid = iattr->ia_uid;
 	}
         if ( valid & ATTR_GID ) {
-                vattr->va_gid = (vgid_t) iattr->ia_gid;
+                vattr->va_gid = iattr->ia_gid;
 	}
         if ( valid & ATTR_SIZE ) {
                 vattr->va_size = iattr->ia_size;
@@ -216,58 +193,3 @@
 	}
 }
 
-void print_vattr(struct coda_vattr *attr)
-{
-    char *typestr;
-
-    switch (attr->va_type) {
-    case C_VNON:
-	typestr = "C_VNON";
-	break;
-    case C_VREG:
-	typestr = "C_VREG";
-	break;
-    case C_VDIR:
-	typestr = "C_VDIR";
-	break;
-    case C_VBLK:
-	typestr = "C_VBLK";
-	break;
-    case C_VCHR:
-	typestr = "C_VCHR";
-	break;
-    case C_VLNK:
-	typestr = "C_VLNK";
-	break;
-    case C_VSOCK:
-	typestr = "C_VSCK";
-	break;
-    case C_VFIFO:
-	typestr = "C_VFFO";
-	break;
-    case C_VBAD:
-	typestr = "C_VBAD";
-	break;
-    default:
-	typestr = "????";
-	break;
-    }
-
-
-    printk("attr: type %s (%o)  mode %o uid %d gid %d rdev %d\n",
-	   typestr, (int)attr->va_type, (int)attr->va_mode, 
-	   (int)attr->va_uid, (int)attr->va_gid, (int)attr->va_rdev);
-    
-    printk("      fileid %d nlink %d size %d blocksize %d bytes %d\n",
-	      (int)attr->va_fileid, (int)attr->va_nlink, 
-	      (int)attr->va_size,
-	      (int)attr->va_blocksize,(int)attr->va_bytes);
-    printk("      gen %ld flags %ld\n",
-	      attr->va_gen, attr->va_flags);
-    printk("      atime sec %d nsec %d\n",
-	      (int)attr->va_atime.tv_sec, (int)attr->va_atime.tv_nsec);
-    printk("      mtime sec %d nsec %d\n",
-	      (int)attr->va_mtime.tv_sec, (int)attr->va_mtime.tv_nsec);
-    printk("      ctime sec %d nsec %d\n",
-	      (int)attr->va_ctime.tv_sec, (int)attr->va_ctime.tv_nsec);
-}
diff -urN --exclude-from=dontdiff linux-2.5.63/fs/coda/dir.c linux-2.5.63-coda/fs/coda/dir.c
--- linux-2.5.63/fs/coda/dir.c	2002-12-17 21:09:56.000000000 -0500
+++ linux-2.5.63-coda/fs/coda/dir.c	2003-02-27 11:52:35.000000000 -0500
@@ -93,12 +93,14 @@
 static struct dentry *coda_lookup(struct inode *dir, struct dentry *entry)
 {
 	struct inode *res_inode = NULL;
-	struct ViceFid resfid = {0,0,0};
+	CodaFid resfid;
 	int dropme = 0; /* to indicate entry should not be cached */
 	int type = 0;
 	int error = 0;
 	const char *name = entry->d_name.name;
 	size_t length = entry->d_name.len;
+
+	memset(&resfid, 0, sizeof(CodaFid));
 	
 	if ( length > CODA_MAXNAMLEN ) {
 	        printk("name too long: lookup, %s (%*s)\n", 
@@ -196,7 +198,7 @@
 	const char *name=de->d_name.name;
 	int length=de->d_name.len;
 	struct inode *inode;
-	struct ViceFid newfid;
+	CodaFid newfid;
 	struct coda_vattr attrs;
 
 	lock_kernel();
@@ -236,7 +238,7 @@
 	const char *name=de->d_name.name;
 	int length=de->d_name.len;
 	struct inode *inode;
-	struct ViceFid newfid;
+	CodaFid newfid;
 	struct coda_vattr attrs;
 
 	if ( coda_hasmknod == 0 )
@@ -280,7 +282,7 @@
 	const char *name = de->d_name.name;
 	int len = de->d_name.len;
 	int error;
-	struct ViceFid newfid;
+	CodaFid newfid;
 
 	lock_kernel();
 	coda_vfs_stat.mkdir++;
diff -urN --exclude-from=dontdiff linux-2.5.63/fs/coda/file.c linux-2.5.63-coda/fs/coda/file.c
--- linux-2.5.63/fs/coda/file.c	2002-12-17 21:09:56.000000000 -0500
+++ linux-2.5.63-coda/fs/coda/file.c	2003-02-27 11:52:35.000000000 -0500
@@ -136,7 +136,6 @@
 	cfi->cfi_magic = CODA_MAGIC;
 	cfi->cfi_mapcount = 0;
 	cfi->cfi_container = host_file;
-	coda_load_creds(&cfi->cfi_cred);
 
 	BUG_ON(coda_file->private_data != NULL);
 	coda_file->private_data = cfi;
@@ -173,7 +172,7 @@
 	coda_inode = coda_file->f_dentry->d_inode;
 
 	err = venus_store(coda_inode->i_sb, coda_i2f(coda_inode), coda_flags,
-			  &cfi->cfi_cred);
+			  coda_file->f_uid);
 
 	if (err == -EOPNOTSUPP) {
 		use_coda_close = 1;
@@ -209,7 +208,7 @@
 
 	if (use_coda_close)
 		err = venus_close(coda_inode->i_sb, coda_i2f(coda_inode),
-				  coda_flags, &cfi->cfi_cred);
+				  coda_flags, coda_file->f_uid);
 
 	host_inode = cfi->cfi_container->f_dentry->d_inode;
 	cii = ITOC(coda_inode);
diff -urN --exclude-from=dontdiff linux-2.5.63/fs/coda/inode.c linux-2.5.63-coda/fs/coda/inode.c
--- linux-2.5.63/fs/coda/inode.c	2003-01-02 10:58:45.000000000 -0500
+++ linux-2.5.63-coda/fs/coda/inode.c	2003-02-27 11:52:35.000000000 -0500
@@ -44,10 +44,10 @@
 	ei = (struct coda_inode_info *)kmem_cache_alloc(coda_inode_cachep, SLAB_KERNEL);
 	if (!ei)
 		return NULL;
-	memset(&ei->c_fid, 0, sizeof(struct ViceFid));
+	memset(&ei->c_fid, 0, sizeof(CodaFid));
 	ei->c_flags = 0;
 	INIT_LIST_HEAD(&ei->c_cilist);
-	memset(&ei->c_cached_cred, 0, sizeof(struct coda_cred));
+	ei->c_uid = 0;
 	ei->c_cached_perm = 0;
 	return &ei->vfs_inode;
 }
@@ -139,7 +139,7 @@
         struct inode *root = 0; 
 	struct coda_sb_info *sbi = NULL;
 	struct venus_comm *vc = NULL;
-        ViceFid fid;
+        CodaFid fid;
         int error;
 	int idx;
 
diff -urN --exclude-from=dontdiff linux-2.5.63/fs/coda/psdev.c linux-2.5.63-coda/fs/coda/psdev.c
--- linux-2.5.63/fs/coda/psdev.c	2002-12-17 21:09:56.000000000 -0500
+++ linux-2.5.63-coda/fs/coda/psdev.c	2003-02-27 11:52:35.000000000 -0500
@@ -61,7 +61,6 @@
 
 
 struct venus_comm coda_comms[MAX_CODADEVS];
-kmem_cache_t *cii_cache, *cred_cache, *upc_cache;
 
 /*
  * Device operations
@@ -126,13 +125,13 @@
 		}
 
 		if  ( nbytes < sizeof(struct coda_out_hdr) ) {
-		        printk("coda_downcall opc %ld uniq %ld, not enough!\n",
+		        printk("coda_downcall opc %d uniq %d, not enough!\n",
 			       hdr.opcode, hdr.unique);
 			count = nbytes;
 			goto out;
 		}
 		if ( nbytes > size ) {
-		        printk("Coda: downcall opc %ld, uniq %ld, too much!",
+		        printk("Coda: downcall opc %d, uniq %d, too much!",
 			       hdr.opcode, hdr.unique);
 		        nbytes = size;
 		}
@@ -171,7 +170,7 @@
 	unlock_kernel();
 
 	if (!req) {
-		printk("psdev_write: msg (%ld, %ld) not found\n", 
+		printk("psdev_write: msg (%d, %d) not found\n", 
 			hdr.opcode, hdr.unique);
 		retval = -ESRCH;
 		goto out;
@@ -179,8 +178,8 @@
 
         /* move data into response buffer. */
 	if (req->uc_outSize < nbytes) {
-                printk("psdev_write: too much cnt: %d, cnt: %ld, opc: %ld, uniq: %ld.\n",
-		       req->uc_outSize, (long)nbytes, hdr.opcode, hdr.unique);
+                printk("psdev_write: too much cnt: %d, cnt: %d, opc: %d, uniq: %d.\n",
+		       req->uc_outSize, nbytes, hdr.opcode, hdr.unique);
 		nbytes = req->uc_outSize; /* don't have more space! */
 	}
         if (copy_from_user(req->uc_data, buf, nbytes)) {
diff -urN --exclude-from=dontdiff linux-2.5.63/fs/coda/upcall.c linux-2.5.63-coda/fs/coda/upcall.c
--- linux-2.5.63/fs/coda/upcall.c	2003-01-02 10:58:45.000000000 -0500
+++ linux-2.5.63-coda/fs/coda/upcall.c	2003-02-27 11:52:35.000000000 -0500
@@ -55,7 +55,7 @@
         inp->ih.opcode = opcode;
 	inp->ih.pid = current->pid;
 	inp->ih.pgid = current->pgrp;
-	coda_load_creds(&(inp->ih.cred));
+	inp->ih.uid = current->fsuid;
 
 	return (void*)inp;
 }
@@ -74,7 +74,7 @@
 
 
 /* the upcalls */
-int venus_rootfid(struct super_block *sb, ViceFid *fidp)
+int venus_rootfid(struct super_block *sb, CodaFid *fidp)
 {
         union inputArgs *inp;
         union outputArgs *outp;
@@ -88,15 +88,14 @@
 	if (error) {
 	        printk("coda_get_rootfid: error %d\n", error);
 	} else {
-		*fidp = (ViceFid) outp->coda_root.VFid;
+		*fidp = outp->coda_root.Fid;
 	}
 
 	CODA_FREE(inp, insize);
 	return error;
 }
 
-int venus_getattr(struct super_block *sb, struct ViceFid *fid, 
-		     struct coda_vattr *attr) 
+int venus_getattr(struct super_block *sb, CodaFid *fid, struct coda_vattr *attr)
 {
         union inputArgs *inp;
         union outputArgs *outp;
@@ -104,7 +103,7 @@
 
         insize = SIZE(getattr); 
 	UPARG(CODA_GETATTR);
-        inp->coda_getattr.VFid = *fid;
+        inp->coda_getattr.Fid = *fid;
 
         error = coda_upcall(coda_sbp(sb), insize, &outsize, inp);
 	
@@ -114,8 +113,7 @@
         return error;
 }
 
-int venus_setattr(struct super_block *sb, struct ViceFid *fid, 
-		  struct coda_vattr *vattr)
+int venus_setattr(struct super_block *sb, CodaFid *fid, struct coda_vattr *vattr)
 {
         union inputArgs *inp;
         union outputArgs *outp;
@@ -124,7 +122,7 @@
 	insize = SIZE(setattr);
 	UPARG(CODA_SETATTR);
 
-        inp->coda_setattr.VFid = *fid;
+        inp->coda_setattr.Fid = *fid;
 	inp->coda_setattr.attr = *vattr;
 
         error = coda_upcall(coda_sbp(sb), insize, &outsize, inp);
@@ -133,9 +131,8 @@
         return error;
 }
 
-int venus_lookup(struct super_block *sb, struct ViceFid *fid, 
-		    const char *name, int length, int * type, 
-		    struct ViceFid *resfid)
+int venus_lookup(struct super_block *sb, CodaFid *fid, const char *name,
+		 int length, int *type, CodaFid *resfid)
 {
         union inputArgs *inp;
         union outputArgs *outp;
@@ -146,7 +143,7 @@
         insize = max_t(unsigned int, offset + length +1, OUTSIZE(lookup));
 	UPARG(CODA_LOOKUP);
 
-        inp->coda_lookup.VFid = *fid;
+        inp->coda_lookup.Fid = *fid;
 	inp->coda_lookup.name = offset;
 	inp->coda_lookup.flags = CLU_CASE_SENSITIVE;
         /* send Venus a null terminated string */
@@ -155,15 +152,14 @@
 
         error = coda_upcall(coda_sbp(sb), insize, &outsize, inp);
 
-	*resfid = outp->coda_lookup.VFid;
+	*resfid = outp->coda_lookup.Fid;
 	*type = outp->coda_lookup.vtype;
 
 	CODA_FREE(inp, insize);
 	return error;
 }
 
-int venus_store(struct super_block *sb, struct ViceFid *fid, int flags,
-                struct coda_cred *cred)
+int venus_store(struct super_block *sb, CodaFid *fid, int flags, uid_t uid)
 {
         union inputArgs *inp;
         union outputArgs *outp;
@@ -172,9 +168,9 @@
 	insize = SIZE(store);
 	UPARG(CODA_STORE);
 	
-	memcpy(&(inp->ih.cred), cred, sizeof(*cred));
+	inp->ih.uid = uid;
 	
-        inp->coda_store.VFid = *fid;
+        inp->coda_store.Fid = *fid;
         inp->coda_store.flags = flags;
 
         error = coda_upcall(coda_sbp(sb), insize, &outsize, inp);
@@ -183,7 +179,7 @@
         return error;
 }
 
-int venus_release(struct super_block *sb, struct ViceFid *fid, int flags)
+int venus_release(struct super_block *sb, CodaFid *fid, int flags)
 {
         union inputArgs *inp;
         union outputArgs *outp;
@@ -192,7 +188,7 @@
 	insize = SIZE(release);
 	UPARG(CODA_RELEASE);
 	
-	inp->coda_release.VFid = *fid;
+	inp->coda_release.Fid = *fid;
 	inp->coda_release.flags = flags;
 
 	error = coda_upcall(coda_sbp(sb), insize, &outsize, inp);
@@ -201,8 +197,7 @@
 	return error;
 }
 
-int venus_close(struct super_block *sb, struct ViceFid *fid, int flags,
-                struct coda_cred *cred)
+int venus_close(struct super_block *sb, CodaFid *fid, int flags, uid_t uid)
 {
 	union inputArgs *inp;
 	union outputArgs *outp;
@@ -211,9 +206,8 @@
 	insize = SIZE(release);
 	UPARG(CODA_CLOSE);
 	
-	memcpy(&(inp->ih.cred), cred, sizeof(*cred));
-	
-        inp->coda_close.VFid = *fid;
+	inp->ih.uid = uid;
+        inp->coda_close.Fid = *fid;
         inp->coda_close.flags = flags;
 
         error = coda_upcall(coda_sbp(sb), insize, &outsize, inp);
@@ -222,8 +216,7 @@
         return error;
 }
 
-int venus_open(struct super_block *sb, struct ViceFid *fid,
-		  int flags, struct file **fh)
+int venus_open(struct super_block *sb, CodaFid *fid, int flags, struct file **fh)
 {
         union inputArgs *inp;
         union outputArgs *outp;
@@ -232,7 +225,7 @@
 	insize = SIZE(open_by_fd);
 	UPARG(CODA_OPEN_BY_FD);
 
-        inp->coda_open.VFid = *fid;
+        inp->coda_open.Fid = *fid;
         inp->coda_open.flags = flags;
 
         error = coda_upcall(coda_sbp(sb), insize, &outsize, inp);
@@ -243,9 +236,8 @@
 	return error;
 }	
 
-int venus_mkdir(struct super_block *sb, struct ViceFid *dirfid, 
-		   const char *name, int length, 
-		   struct ViceFid *newfid, struct coda_vattr *attrs)
+int venus_mkdir(struct super_block *sb, CodaFid *dirfid, const char *name,
+		int length, CodaFid *newfid, struct coda_vattr *attrs)
 {
         union inputArgs *inp;
         union outputArgs *outp;
@@ -256,7 +248,7 @@
 	insize = max_t(unsigned int, offset + length + 1, OUTSIZE(mkdir));
 	UPARG(CODA_MKDIR);
 
-        inp->coda_mkdir.VFid = *dirfid;
+        inp->coda_mkdir.Fid = *dirfid;
         inp->coda_mkdir.attr = *attrs;
 	inp->coda_mkdir.name = offset;
         /* Venus must get null terminated string */
@@ -266,16 +258,15 @@
         error = coda_upcall(coda_sbp(sb), insize, &outsize, inp);
 
 	*attrs = outp->coda_mkdir.attr;
-	*newfid = outp->coda_mkdir.VFid;
+	*newfid = outp->coda_mkdir.Fid;
 
 	CODA_FREE(inp, insize);
 	return error;        
 }
 
 
-int venus_rename(struct super_block *sb, struct ViceFid *old_fid, 
-		 struct ViceFid *new_fid, size_t old_length, 
-		 size_t new_length, const char *old_name, 
+int venus_rename(struct super_block *sb, CodaFid *old_fid, CodaFid *new_fid,
+		 size_t old_length, size_t new_length, const char *old_name, 
 		 const char *new_name)
 {
 	union inputArgs *inp;
@@ -310,9 +301,9 @@
 	return error;
 }
 
-int venus_create(struct super_block *sb, struct ViceFid *dirfid, 
-		 const char *name, int length, int excl, int mode, dev_t rdev,
-		 struct ViceFid *newfid, struct coda_vattr *attrs) 
+int venus_create(struct super_block *sb, CodaFid *dirfid, const char *name,
+		 int length, int excl, int mode, dev_t rdev, CodaFid *newfid,
+		 struct coda_vattr *attrs) 
 {
         union inputArgs *inp;
         union outputArgs *outp;
@@ -323,7 +314,7 @@
 	insize = max_t(unsigned int, offset + length + 1, OUTSIZE(create));
 	UPARG(CODA_CREATE);
 
-        inp->coda_create.VFid = *dirfid;
+        inp->coda_create.Fid = *dirfid;
         inp->coda_create.attr.va_mode = mode;
         inp->coda_create.attr.va_rdev = rdev;
 	inp->coda_create.excl = excl;
@@ -337,14 +328,13 @@
         error = coda_upcall(coda_sbp(sb), insize, &outsize, inp);
 
 	*attrs = outp->coda_create.attr;
-	*newfid = outp->coda_create.VFid;
+	*newfid = outp->coda_create.Fid;
 
 	CODA_FREE(inp, insize);
 	return error;        
 }
 
-int venus_rmdir(struct super_block *sb, struct ViceFid *dirfid, 
-		    const char *name, int length)
+int venus_rmdir(struct super_block *sb, CodaFid *dirfid, const char *name, int length)
 {
         union inputArgs *inp;
         union outputArgs *outp;
@@ -355,7 +345,7 @@
 	insize = max_t(unsigned int, offset + length + 1, OUTSIZE(rmdir));
 	UPARG(CODA_RMDIR);
 
-        inp->coda_rmdir.VFid = *dirfid;
+        inp->coda_rmdir.Fid = *dirfid;
         inp->coda_rmdir.name = offset;
         memcpy((char *)(inp) + offset, name, length);
 	*((char *)inp + offset + length) = '\0';
@@ -366,8 +356,7 @@
 	return error;
 }
 
-int venus_remove(struct super_block *sb, struct ViceFid *dirfid, 
-		    const char *name, int length)
+int venus_remove(struct super_block *sb, CodaFid *dirfid, const char *name, int length)
 {
         union inputArgs *inp;
         union outputArgs *outp;
@@ -377,7 +366,7 @@
 	insize = max_t(unsigned int, offset + length + 1, OUTSIZE(remove));
 	UPARG(CODA_REMOVE);
 
-        inp->coda_remove.VFid = *dirfid;
+        inp->coda_remove.Fid = *dirfid;
         inp->coda_remove.name = offset;
         memcpy((char *)(inp) + offset, name, length);
 	*((char *)inp + offset + length) = '\0';
@@ -388,8 +377,7 @@
 	return error;
 }
 
-int venus_readlink(struct super_block *sb, struct ViceFid *fid, 
-		      char *buffer, int *length)
+int venus_readlink(struct super_block *sb, CodaFid *fid, char *buffer, int *length)
 { 
         union inputArgs *inp;
         union outputArgs *outp;
@@ -401,7 +389,7 @@
 		     INSIZE(readlink), OUTSIZE(readlink)+ *length + 1);
 	UPARG(CODA_READLINK);
 
-        inp->coda_readlink.VFid = *fid;
+        inp->coda_readlink.Fid = *fid;
     
         error =  coda_upcall(coda_sbp(sb), insize, &outsize, inp);
 	
@@ -421,8 +409,8 @@
 
 
 
-int venus_link(struct super_block *sb, struct ViceFid *fid, 
-		  struct ViceFid *dirfid, const char *name, int len )
+int venus_link(struct super_block *sb, CodaFid *fid, CodaFid *dirfid,
+	       const char *name, int len )
 {
         union inputArgs *inp;
         union outputArgs *outp;
@@ -447,9 +435,8 @@
         return error;
 }
 
-int venus_symlink(struct super_block *sb, struct ViceFid *fid,
-		     const char *name, int len,
-		     const char *symname, int symlen)
+int venus_symlink(struct super_block *sb, CodaFid *fid, const char *name,
+		  int len, const char *symname, int symlen)
 {
         union inputArgs *inp;
         union outputArgs *outp;
@@ -461,7 +448,7 @@
 	UPARG(CODA_SYMLINK);
         
         /*        inp->coda_symlink.attr = *tva; XXXXXX */ 
-        inp->coda_symlink.VFid = *fid;
+        inp->coda_symlink.Fid = *fid;
 
 	/* Round up to word boundary and null terminate */
         inp->coda_symlink.srcname = offset;
@@ -482,7 +469,7 @@
         return error;
 }
 
-int venus_fsync(struct super_block *sb, struct ViceFid *fid)
+int venus_fsync(struct super_block *sb, CodaFid *fid)
 {
         union inputArgs *inp;
         union outputArgs *outp; 
@@ -491,7 +478,7 @@
 	insize=SIZE(fsync);
 	UPARG(CODA_FSYNC);
 
-        inp->coda_fsync.VFid = *fid;
+        inp->coda_fsync.Fid = *fid;
         error = coda_upcall(coda_sbp(sb), sizeof(union inputArgs), 
                             &outsize, inp);
 
@@ -499,7 +486,7 @@
 	return error;
 }
 
-int venus_access(struct super_block *sb, struct ViceFid *fid, int mask)
+int venus_access(struct super_block *sb, CodaFid *fid, int mask)
 {
         union inputArgs *inp;
         union outputArgs *outp; 
@@ -508,7 +495,7 @@
 	insize = SIZE(access);
 	UPARG(CODA_ACCESS);
 
-        inp->coda_access.VFid = *fid;
+        inp->coda_access.Fid = *fid;
         inp->coda_access.flags = mask;
 
 	error = coda_upcall(coda_sbp(sb), insize, &outsize, inp);
@@ -518,8 +505,8 @@
 }
 
 
-int venus_pioctl(struct super_block *sb, struct ViceFid *fid,
-		 unsigned int cmd, struct PioctlData *data)
+int venus_pioctl(struct super_block *sb, CodaFid *fid, unsigned int cmd,
+		 struct PioctlData *data)
 {
         union inputArgs *inp;
         union outputArgs *outp;  
@@ -535,7 +522,7 @@
 		goto exit;
         }
 
-        inp->coda_ioctl.VFid = *fid;
+        inp->coda_ioctl.Fid = *fid;
     
         /* the cmd field was mutated by increasing its size field to
          * reflect the path and follow args. We need to subtract that
@@ -615,8 +602,7 @@
  * 
  */
 
-static inline void coda_waitfor_upcall(struct upc_req *vmp,
-				       struct venus_comm *vcommp)
+static inline void coda_waitfor_upcall(struct upc_req *vmp, struct venus_comm *vcommp)
 {
 	DECLARE_WAITQUEUE(wait, current);
 
@@ -666,9 +652,8 @@
  * are all mapped to -EINTR, while showing a nice warning message. (jh)
  * 
  */
-static int coda_upcall(struct coda_sb_info *sbi, 
-		int inSize, int *outSize, 
-		union inputArgs *buffer) 
+static int coda_upcall(struct coda_sb_info *sbi, int inSize, int *outSize, 
+		       union inputArgs *buffer) 
 {
 	struct venus_comm *vcommp;
 	union outputArgs *out;
@@ -808,7 +793,7 @@
  * The last  allows Venus to replace local fids with global ones
  * during reintegration.
  *
- * CODA_REPLACE -- replace one ViceFid with another throughout the name cache */
+ * CODA_REPLACE -- replace one CodaFid with another throughout the name cache */
 
 int coda_downcall(int opcode, union outputArgs * out, struct super_block *sb)
 {
@@ -826,18 +811,14 @@
 	  }
 
 	  case CODA_PURGEUSER : {
-	           struct coda_cred *cred = &out->coda_purgeuser.cred;
-		   if ( !cred ) {
-		           printk("PURGEUSER: null cred!\n");
-			   return 0;
-		   }
-		   coda_cache_clear_all(sb, cred);
-		   return(0);
+		uid_t uid = out->coda_purgeuser.uid;
+		coda_cache_clear_all(sb, &uid);
+		return(0);
 	  }
 
 	  case CODA_ZAPDIR : {
 	          struct inode *inode;
-		  ViceFid *fid = &out->coda_zapdir.CodaFid;
+		  CodaFid *fid = &out->coda_zapdir.Fid;
 
 		  inode = coda_fid_to_inode(fid, sb);
 		  if (inode) {
@@ -851,7 +832,7 @@
 
 	  case CODA_ZAPFILE : {
 	          struct inode *inode;
-		  struct ViceFid *fid = &out->coda_zapfile.CodaFid;
+		  CodaFid *fid = &out->coda_zapfile.Fid;
 		  inode = coda_fid_to_inode(fid, sb);
 		  if ( inode ) {
 	                  coda_flag_inode(inode, C_VATTR);
@@ -862,7 +843,7 @@
 
 	  case CODA_PURGEFID : {
 	          struct inode *inode;
-		  ViceFid *fid = &out->coda_purgefid.CodaFid;
+		  CodaFid *fid = &out->coda_purgefid.Fid;
 		  inode = coda_fid_to_inode(fid, sb);
 		  if ( inode ) { 
 			coda_flag_inode_children(inode, C_PURGE);
@@ -878,8 +859,8 @@
 
 	  case CODA_REPLACE : {
 	          struct inode *inode;
-		  ViceFid *oldfid = &out->coda_replace.OldFid;
-		  ViceFid *newfid = &out->coda_replace.NewFid;
+		  CodaFid *oldfid = &out->coda_replace.OldFid;
+		  CodaFid *newfid = &out->coda_replace.NewFid;
 		  inode = coda_fid_to_inode(oldfid, sb);
 		  if ( inode ) { 
 			  coda_replace_fid(inode, oldfid, newfid);
diff -urN --exclude-from=dontdiff linux-2.5.63/include/linux/coda.h linux-2.5.63-coda/include/linux/coda.h
--- linux-2.5.63/include/linux/coda.h	2002-12-17 21:09:56.000000000 -0500
+++ linux-2.5.63-coda/include/linux/coda.h	2003-02-27 11:54:01.000000000 -0500
@@ -194,55 +194,14 @@
 
 #endif
 
-#ifndef	_FID_T_
-#define _FID_T_	1
-typedef u_long VolumeId;
-typedef u_long VnodeId;
-typedef u_long Unique_t;
-typedef u_long FileVersion;
-#endif 
+typedef struct {
+    u_int32_t opaque[4];
+} CodaFid;
 
-#ifndef	_VICEFID_T_
-#define _VICEFID_T_	1
-typedef struct ViceFid {
-    VolumeId Volume;
-    VnodeId Vnode;
-    Unique_t Unique;
-} ViceFid;
-#endif	/* VICEFID */
-
-
-#ifdef __linux__
-static __inline__ ino_t  coda_f2i(struct ViceFid *fid)
-{
-	if ( ! fid ) 
-		return 0; 
-	if (fid->Vnode == 0xfffffffe || fid->Vnode == 0xffffffff)
-		return ((fid->Volume << 20) | (fid->Unique & 0xfffff));
-	else
-		return (fid->Unique + (fid->Vnode<<10) + (fid->Volume<<20));
-}
-	
-#else
 #define coda_f2i(fid)\
-	((fid) ? ((fid)->Unique + ((fid)->Vnode<<10) + ((fid)->Volume<<20)) : 0)
-#endif
+	((fid) ? ((fid)->opaque[3] + ((fid)->opaque[2]<<10) + ((fid)->opaque[1]<<20)) : 0)
 
 
-#ifndef _VUID_T_
-#define _VUID_T_
-typedef u_int32_t vuid_t;
-typedef u_int32_t vgid_t;
-#endif /*_VUID_T_ */
-
-#ifndef _CODACRED_T_
-#define _CODACRED_T_
-struct coda_cred {
-    vuid_t cr_uid, cr_euid, cr_suid, cr_fsuid; /* Real, efftve, set, fs uid*/
-    vgid_t cr_groupid,     cr_egid, cr_sgid, cr_fsgid; /* same for groups */
-};
-#endif 
-
 #ifndef _VENUS_VATTR_T_
 #define _VENUS_VATTR_T_
 /*
@@ -254,8 +213,8 @@
 	long     	va_type;	/* vnode type (for create) */
 	u_short		va_mode;	/* files access mode and type */
 	short		va_nlink;	/* number of references to file */
-	vuid_t		va_uid;		/* owner user id */
-	vgid_t		va_gid;		/* owner group id */
+	uid_t		va_uid;		/* owner user id */
+	gid_t		va_gid;		/* owner group id */
 	long		va_fileid;	/* file id */
 	u_quad_t	va_size;	/* file size in bytes */
 	long		va_blocksize;	/* blocksize preferred for i/o */
@@ -329,32 +288,33 @@
 #if 0
 #define CODA_KERNEL_VERSION 0 /* don't care about kernel version number */
 #define CODA_KERNEL_VERSION 1 /* The old venus 4.6 compatible interface */
-#endif
 #define CODA_KERNEL_VERSION 2 /* venus_lookup gets an extra parameter */
+#endif
+#define CODA_KERNEL_VERSION 3 /* 128-bit file identifiers */
+
 
 /*
  *        Venus <-> Coda  RPC arguments
  */
 struct coda_in_hdr {
-    unsigned long opcode;
-    unsigned long unique;	    /* Keep multiple outstanding msgs distinct */
-    u_short pid;		    /* Common to all */
-    u_short pgid;		    /* Common to all */
-    u_short sid;                    /* Common to all */
-    struct coda_cred cred;	    /* Common to all */
+    u_int32_t opcode;
+    u_int32_t unique;	    /* Keep multiple outstanding msgs distinct */
+    pid_t pid;		    /* Common to all */
+    pid_t pgid;		    /* Common to all */
+    uid_t uid;
 };
 
 /* Really important that opcode and unique are 1st two fields! */
 struct coda_out_hdr {
-    unsigned long opcode;
-    unsigned long unique;	
-    unsigned long result;
+    u_int32_t opcode;
+    u_int32_t unique;	
+    u_int32_t result;
 };
 
 /* coda_root: NO_IN */
 struct coda_root_out {
     struct coda_out_hdr oh;
-    ViceFid VFid;
+    CodaFid Fid;
 };
 
 struct coda_root_in {
@@ -364,7 +324,7 @@
 /* coda_open: */
 struct coda_open_in {
     struct coda_in_hdr ih;
-    ViceFid	VFid;
+    CodaFid Fid;
     int	flags;
 };
 
@@ -378,7 +338,7 @@
 /* coda_store: */
 struct coda_store_in {
     struct coda_in_hdr ih;
-    ViceFid	VFid;
+    CodaFid Fid;
     int	flags;
 };
 
@@ -389,7 +349,7 @@
 /* coda_release: */
 struct coda_release_in {
     struct coda_in_hdr ih;
-    ViceFid	VFid;
+    CodaFid Fid;
     int	flags;
 };
 
@@ -400,7 +360,7 @@
 /* coda_close: */
 struct coda_close_in {
     struct coda_in_hdr ih;
-    ViceFid	VFid;
+    CodaFid Fid;
     int	flags;
 };
 
@@ -411,7 +371,7 @@
 /* coda_ioctl: */
 struct coda_ioctl_in {
     struct coda_in_hdr ih;
-    ViceFid VFid;
+    CodaFid Fid;
     int	cmd;
     int	len;
     int	rwflag;
@@ -421,14 +381,14 @@
 struct coda_ioctl_out {
     struct coda_out_hdr oh;
     int	len;
-    caddr_t	data;		/* Place holder for data. */
+    caddr_t data;		/* Place holder for data. */
 };
 
 
 /* coda_getattr: */
 struct coda_getattr_in {
     struct coda_in_hdr ih;
-    ViceFid VFid;
+    CodaFid Fid;
 };
 
 struct coda_getattr_out {
@@ -440,7 +400,7 @@
 /* coda_setattr: NO_OUT */
 struct coda_setattr_in {
     struct coda_in_hdr ih;
-    ViceFid VFid;
+    CodaFid Fid;
     struct coda_vattr attr;
 };
 
@@ -451,7 +411,7 @@
 /* coda_access: NO_OUT */
 struct coda_access_in {
     struct coda_in_hdr ih;
-    ViceFid	VFid;
+    CodaFid Fid;
     int	flags;
 };
 
@@ -467,14 +427,14 @@
 /* coda_lookup: */
 struct  coda_lookup_in {
     struct coda_in_hdr ih;
-    ViceFid	VFid;
-    int         name;		/* Place holder for data. */
-    int         flags;	
+    CodaFid Fid;
+    int name;		/* Place holder for data. */
+    int flags;	
 };
 
 struct coda_lookup_out {
     struct coda_out_hdr oh;
-    ViceFid VFid;
+    CodaFid Fid;
     int	vtype;
 };
 
@@ -482,16 +442,16 @@
 /* coda_create: */
 struct coda_create_in {
     struct coda_in_hdr ih;
-    ViceFid VFid;
+    CodaFid Fid;
     struct coda_vattr attr;
     int excl;
     int mode;
-    int 	name;		/* Place holder for data. */
+    int name;		/* Place holder for data. */
 };
 
 struct coda_create_out {
     struct coda_out_hdr oh;
-    ViceFid VFid;
+    CodaFid Fid;
     struct coda_vattr attr;
 };
 
@@ -499,8 +459,8 @@
 /* coda_remove: NO_OUT */
 struct coda_remove_in {
     struct coda_in_hdr ih;
-    ViceFid	VFid;
-    int name;		/* Place holder for data. */
+    CodaFid Fid;
+    int name;			/* Place holder for data. */
 };
 
 struct coda_remove_out {
@@ -510,9 +470,9 @@
 /* coda_link: NO_OUT */
 struct coda_link_in {
     struct coda_in_hdr ih;
-    ViceFid sourceFid;          /* cnode to link *to* */
-    ViceFid destFid;            /* Directory in which to place link */
-    int tname;		/* Place holder for data. */
+    CodaFid sourceFid;          /* cnode to link *to* */
+    CodaFid destFid;            /* Directory in which to place link */
+    int tname;			/* Place holder for data. */
 };
 
 struct coda_link_out {
@@ -523,10 +483,10 @@
 /* coda_rename: NO_OUT */
 struct coda_rename_in {
     struct coda_in_hdr ih;
-    ViceFid	sourceFid;
-    int 	srcname;
-    ViceFid destFid;
-    int 	destname;
+    CodaFid sourceFid;
+    int srcname;
+    CodaFid destFid;
+    int destname;
 };
 
 struct coda_rename_out {
@@ -536,14 +496,14 @@
 /* coda_mkdir: */
 struct coda_mkdir_in {
     struct coda_in_hdr ih;
-    ViceFid	VFid;
+    CodaFid Fid;
     struct coda_vattr attr;
-    int	   name;		/* Place holder for data. */
+    int	name;			/* Place holder for data. */
 };
 
 struct coda_mkdir_out {
     struct coda_out_hdr oh;
-    ViceFid VFid;
+    CodaFid Fid;
     struct coda_vattr attr;
 };
 
@@ -551,8 +511,8 @@
 /* coda_rmdir: NO_OUT */
 struct coda_rmdir_in {
     struct coda_in_hdr ih;
-    ViceFid	VFid;
-    int name;		/* Place holder for data. */
+    CodaFid Fid;
+    int name;			/* Place holder for data. */
 };
 
 struct coda_rmdir_out {
@@ -562,7 +522,7 @@
 /* coda_symlink: NO_OUT */
 struct coda_symlink_in {
     struct coda_in_hdr ih;
-    ViceFid	VFid;          /* Directory to put symlink in */
+    CodaFid Fid;		/* Directory to put symlink in */
     int srcname;
     struct coda_vattr attr;
     int tname;
@@ -575,20 +535,20 @@
 /* coda_readlink: */
 struct coda_readlink_in {
     struct coda_in_hdr ih;
-    ViceFid VFid;
+    CodaFid Fid;
 };
 
 struct coda_readlink_out {
     struct coda_out_hdr oh;
     int	count;
-    caddr_t	data;		/* Place holder for data. */
+    caddr_t data;		/* Place holder for data. */
 };
 
 
 /* coda_fsync: NO_OUT */
 struct coda_fsync_in {
     struct coda_in_hdr ih;
-    ViceFid VFid;
+    CodaFid Fid;
 };
 
 struct coda_fsync_out {
@@ -598,12 +558,12 @@
 /* coda_vget: */
 struct coda_vget_in {
     struct coda_in_hdr ih;
-    ViceFid VFid;
+    CodaFid Fid;
 };
 
 struct coda_vget_out {
     struct coda_out_hdr oh;
-    ViceFid VFid;
+    CodaFid Fid;
     int	vtype;
 };
 
@@ -616,51 +576,50 @@
 /* CODA_PURGEUSER is a venus->kernel call */
 struct coda_purgeuser_out {
     struct coda_out_hdr oh;
-    struct coda_cred cred;
+    uid_t uid;
 };
 
 /* coda_zapfile: */
 /* CODA_ZAPFILE is a venus->kernel call */
 struct coda_zapfile_out {  
     struct coda_out_hdr oh;
-    ViceFid CodaFid;
+    CodaFid Fid;
 };
 
 /* coda_zapdir: */
 /* CODA_ZAPDIR is a venus->kernel call */	
 struct coda_zapdir_out {	  
     struct coda_out_hdr oh;
-    ViceFid CodaFid;
+    CodaFid Fid;
 };
 
 /* coda_zapnode: */
 /* CODA_ZAPVNODE is a venus->kernel call */	
 struct coda_zapvnode_out { 
     struct coda_out_hdr oh;
-    struct coda_cred cred;
-    ViceFid VFid;
+    CodaFid Fid;
 };
 
 /* coda_purgefid: */
 /* CODA_PURGEFID is a venus->kernel call */	
 struct coda_purgefid_out { 
     struct coda_out_hdr oh;
-    ViceFid CodaFid;
+    CodaFid Fid;
 };
 
 /* coda_replace: */
 /* CODA_REPLACE is a venus->kernel call */	
 struct coda_replace_out { /* coda_replace is a venus->kernel call */
     struct coda_out_hdr oh;
-    ViceFid NewFid;
-    ViceFid OldFid;
+    CodaFid NewFid;
+    CodaFid OldFid;
 };
 
 /* coda_open_by_fd: */
 struct coda_open_by_fd_in {
     struct coda_in_hdr ih;
-    ViceFid    VFid;
-    int        flags;
+    CodaFid Fid;
+    int flags;
 };
 
 struct coda_open_by_fd_out {
@@ -675,13 +634,13 @@
 /* coda_open_by_path: */
 struct coda_open_by_path_in {
     struct coda_in_hdr ih;
-    ViceFid	VFid;
+    CodaFid Fid;
     int	flags;
 };
 
 struct coda_open_by_path_out {
     struct coda_out_hdr oh;
-	int path;
+    int path;
 };
 
 /* coda_statfs: NO_IN */
@@ -780,16 +739,7 @@
 
 #define	CODA_CONTROL		".CONTROL"
 #define CODA_CONTROLLEN           8
-#define	CTL_VOL			-1
-#define	CTL_VNO			-1
-#define	CTL_UNI			-1
 #define CTL_INO                 -1
-#define	CTL_FILE		"/coda/.CONTROL"
-
-
-#define	IS_CTL_FID(fidp)	((fidp)->Volume == CTL_VOL &&\
-				 (fidp)->Vnode == CTL_VNO &&\
-				 (fidp)->Unique == CTL_UNI)
 
 /* Data passed to mount */
 
diff -urN --exclude-from=dontdiff linux-2.5.63/include/linux/coda_cache.h linux-2.5.63-coda/include/linux/coda_cache.h
--- linux-2.5.63/include/linux/coda_cache.h	2002-12-17 21:09:56.000000000 -0500
+++ linux-2.5.63-coda/include/linux/coda_cache.h	2003-02-27 11:52:35.000000000 -0500
@@ -13,7 +13,7 @@
 /* credential cache */
 void coda_cache_enter(struct inode *inode, int mask);
 void coda_cache_clear_inode(struct inode *);
-void coda_cache_clear_all(struct super_block *sb, struct coda_cred *cred);
+void coda_cache_clear_all(struct super_block *sb, uid_t *cred);
 int coda_cache_check(struct inode *inode, int mask);
 
 /* for downcalls and attributes and lookups */
diff -urN --exclude-from=dontdiff linux-2.5.63/include/linux/coda_fs_i.h linux-2.5.63-coda/include/linux/coda_fs_i.h
--- linux-2.5.63/include/linux/coda_fs_i.h	2002-12-17 21:09:56.000000000 -0500
+++ linux-2.5.63-coda/include/linux/coda_fs_i.h	2003-02-27 11:52:35.000000000 -0500
@@ -17,11 +17,11 @@
  * coda fs inode data
  */
 struct coda_inode_info {
-        struct ViceFid     c_fid;	/* Coda identifier */
+        CodaFid		   c_fid;	/* Coda identifier */
         u_short	           c_flags;     /* flags (see below) */
 	struct list_head   c_cilist;    /* list of all coda inodes */
 	unsigned int	   c_mapcount;  /* nr of times this inode is mapped */
-        struct coda_cred   c_cached_cred; /* credentials of cached perms */
+	uid_t		   c_uid;	/* credentials of cached perms */
         unsigned int       c_cached_perm; /* cached access permissions */
 	struct inode	   vfs_inode;
 };
@@ -34,7 +34,6 @@
 	int		   cfi_magic;	  /* magic number */
 	struct file	  *cfi_container; /* container file for this cnode */
 	unsigned int	   cfi_mapcount;  /* nr of times this file is mapped */
-	struct coda_cred   cfi_cred;      /* credentials of opener */
 };
 
 #define CODA_FTOC(file) ((struct coda_file_info *)((file)->private_data))
@@ -45,11 +44,11 @@
 #define C_DYING       0x4   /* from venus (which died) */
 #define C_PURGE       0x8
 
-int coda_cnode_make(struct inode **, struct ViceFid *, struct super_block *);
-struct inode *coda_iget(struct super_block *sb, struct ViceFid *fid, struct coda_vattr *attr);
+int coda_cnode_make(struct inode **, CodaFid *, struct super_block *);
+struct inode *coda_iget(struct super_block *sb, CodaFid *fid, struct coda_vattr *attr);
 int coda_cnode_makectl(struct inode **inode, struct super_block *sb);
-struct inode *coda_fid_to_inode(ViceFid *fid, struct super_block *sb);
-void coda_replace_fid(struct inode *, ViceFid *, ViceFid *);
+struct inode *coda_fid_to_inode(CodaFid *fid, struct super_block *sb);
+void coda_replace_fid(struct inode *, CodaFid *, CodaFid *);
 
 #endif
 #endif
diff -urN --exclude-from=dontdiff linux-2.5.63/include/linux/coda_linux.h linux-2.5.63-coda/include/linux/coda_linux.h
--- linux-2.5.63/include/linux/coda_linux.h	2002-12-17 21:09:56.000000000 -0500
+++ linux-2.5.63-coda/include/linux/coda_linux.h	2003-02-27 11:52:35.000000000 -0500
@@ -42,26 +42,23 @@
 int coda_revalidate_inode(struct dentry *);
 int coda_getattr(struct vfsmount *, struct dentry *, struct kstat *);
 int coda_setattr(struct dentry *, struct iattr *);
-int coda_isnullfid(ViceFid *fid);
+int coda_isnullfid(CodaFid *fid);
 
 /* global variables */
 extern int coda_fake_statfs;
 
 /* this file:  heloers */
-static __inline__ struct ViceFid *coda_i2f(struct inode *);
+static __inline__ CodaFid *coda_i2f(struct inode *);
 static __inline__ char *coda_i2s(struct inode *);
 static __inline__ void coda_flag_inode(struct inode *, int flag);
-char *coda_f2s(ViceFid *f);
+char *coda_f2s(CodaFid *f);
 int coda_isroot(struct inode *i);
 int coda_iscontrol(const char *name, size_t length);
 
-void coda_load_creds(struct coda_cred *cred);
 void coda_vattr_to_iattr(struct inode *, struct coda_vattr *);
 void coda_iattr_to_vattr(struct iattr *, struct coda_vattr *);
 unsigned short coda_flags_to_cflags(unsigned short);
 void print_vattr( struct coda_vattr *attr );
-int coda_cred_ok(struct coda_cred *cred);
-int coda_cred_eq(struct coda_cred *cred1, struct coda_cred *cred2);
 
 /* sysctl.h */
 void coda_sysctl_init(void);
@@ -88,7 +85,7 @@
 	return list_entry(inode, struct coda_inode_info, vfs_inode);
 }
 
-static __inline__ struct ViceFid *coda_i2f(struct inode *inode)
+static __inline__ CodaFid *coda_i2f(struct inode *inode)
 {
 	return &(ITOC(inode)->c_fid);
 }
diff -urN --exclude-from=dontdiff linux-2.5.63/include/linux/coda_psdev.h linux-2.5.63-coda/include/linux/coda_psdev.h
--- linux-2.5.63/include/linux/coda_psdev.h	2003-01-02 10:58:54.000000000 -0500
+++ linux-2.5.63-coda/include/linux/coda_psdev.h	2003-02-27 11:52:35.000000000 -0500
@@ -10,7 +10,7 @@
 
 struct coda_sb_info
 {
-	struct venus_comm * sbi_vcomm;
+	struct venus_comm  *sbi_vcomm;
 	struct super_block *sbi_sb;
 	struct list_head    sbi_cihead;
 };
@@ -33,46 +33,39 @@
 
 
 /* upcalls */
-int venus_rootfid(struct super_block *sb, ViceFid *fidp);
-int venus_getattr(struct super_block *sb, struct ViceFid *fid, 
-		     struct coda_vattr *attr);
-int venus_setattr(struct super_block *, struct ViceFid *, 
-		     struct coda_vattr *);
-int venus_lookup(struct super_block *sb, struct ViceFid *fid, 
-		    const char *name, int length, int *type, 
-		    struct ViceFid *resfid);
-int venus_store(struct super_block *sb, struct ViceFid *fid, int flags,
-		struct coda_cred *);
-int venus_release(struct super_block *sb, struct ViceFid *fid, int flags);
-int venus_close(struct super_block *sb, struct ViceFid *fid, int flags,
-		struct coda_cred *);
-int venus_open(struct super_block *sb, struct ViceFid *fid,
-		int flags, struct file **f);
-int venus_mkdir(struct super_block *sb, struct ViceFid *dirfid, 
-		const char *name, int length, 
-		struct ViceFid *newfid, struct coda_vattr *attrs);
-int venus_create(struct super_block *sb, struct ViceFid *dirfid, 
-		 const char *name, int length, int excl, int mode, dev_t rdev,
-		 struct ViceFid *newfid, struct coda_vattr *attrs) ;
-int venus_rmdir(struct super_block *sb, struct ViceFid *dirfid, 
-		const char *name, int length);
-int venus_remove(struct super_block *sb, struct ViceFid *dirfid, 
-		 const char *name, int length);
-int venus_readlink(struct super_block *sb, struct ViceFid *fid, 
-		   char *buffer, int *length);
-int venus_rename(struct super_block *, struct ViceFid *new_fid, 
-		 struct ViceFid *old_fid, size_t old_length, 
-		 size_t new_length, const char *old_name, 
+int venus_rootfid(struct super_block *sb, CodaFid *fidp);
+int venus_getattr(struct super_block *sb, CodaFid *fid,struct coda_vattr *attr);
+int venus_setattr(struct super_block *, CodaFid *, struct coda_vattr *);
+int venus_lookup(struct super_block *sb, CodaFid *fid, const char *name,
+		 int length, int *type, CodaFid *resfid);
+int venus_store(struct super_block *sb, CodaFid *fid, int flags, uid_t uid);
+int venus_release(struct super_block *sb, CodaFid *fid, int flags);
+int venus_close(struct super_block *sb, CodaFid *fid, int flags, uid_t uid);
+int venus_open(struct super_block *sb, CodaFid *fid, int flags,
+	       struct file **f);
+int venus_mkdir(struct super_block *sb, CodaFid *dirfid, const char *name,
+		int length, CodaFid *newfid, struct coda_vattr *attrs);
+int venus_create(struct super_block *sb, CodaFid *dirfid, const char *name,
+		 int length, int excl, int mode, dev_t rdev, CodaFid *newfid,
+		 struct coda_vattr *attrs) ;
+int venus_rmdir(struct super_block *sb, CodaFid *dirfid, const char *name,
+		int length);
+int venus_remove(struct super_block *sb, CodaFid *dirfid, const char *name,
+		 int length);
+int venus_readlink(struct super_block *sb, CodaFid *fid, char *buffer,
+		   int *length);
+int venus_rename(struct super_block *, CodaFid *new_fid, CodaFid *old_fid,
+		 size_t old_length, size_t new_length, const char *old_name, 
 		 const char *new_name);
-int venus_link(struct super_block *sb, struct ViceFid *fid, 
-		  struct ViceFid *dirfid, const char *name, int len );
-int venus_symlink(struct super_block *sb, struct ViceFid *fid,
-		  const char *name, int len, const char *symname, int symlen);
-int venus_access(struct super_block *sb, struct ViceFid *fid, int mask);
-int venus_pioctl(struct super_block *sb, struct ViceFid *fid,
-		 unsigned int cmd, struct PioctlData *data);
+int venus_link(struct super_block *sb, CodaFid *fid, CodaFid *dirfid,
+	       const char *name, int len );
+int venus_symlink(struct super_block *sb, CodaFid *fid, const char *name,
+		  int len, const char *symname, int symlen);
+int venus_access(struct super_block *sb, CodaFid *fid, int mask);
+int venus_pioctl(struct super_block *sb, CodaFid *fid, unsigned int cmd,
+		 struct PioctlData *data);
 int coda_downcall(int opcode, union outputArgs *out, struct super_block *sb);
-int venus_fsync(struct super_block *sb, struct ViceFid *fid);
+int venus_fsync(struct super_block *sb, CodaFid *fid);
 int venus_statfs(struct super_block *sb, struct statfs *sfs);
 
 
