.TH "MKCODABF" "1" "11 August 2006" "Coda Distributed File System" ""

.SH NAME
mkcodabf \- Make a 'big file' directory tree for Coda
.SH SYNOPSIS

\fBmkcodabf\fR [\fB-f \fIfiles-per-dir\fR] [\fB-s \fIhunk-size\fR]
[\fB-v\fR] \fIfile\fR \fInew-dir\fR

.SH "DESCRIPTION"
.PP
\fBmkcodabf\fR will take an existing large \fIfile\fR and produce
a directory tree rooted at \fInew-dir\fR of much smaller files,
called hunks.  Each hunk, except the last hunk, will be an integral 
number of megabytes as controlled by the \fB-s\fR flag.  The number
of hunk files and subdirectories in each directory is controlled by
the \fB-f\fR flag.  Also, in the
directory \fInew-dir\fR, a meta-data
file, named \fI_Coda_BigFile_\fR, will be created so that \fInew-dir\fR
will appear as a large, read only, regular file after being written to 
the Coda Distributed File System.  
.PP
The reason for these 'big files' is to allow one to write a very
large file, one that is larger than the \fIvenus cache\fR, to Coda
and to be able to read it back.  These are primarily expected to 
be some kind of media files which are written once and read many
times, often in a sequential fashion by a media player.  For this
reason, \fIfile\fR is expected to not be stored in the Coda file
tree and \fInew-dir\fR is expected to be in the Coda file tree.
.PP
\fBmkcodabf\fR supports the following options:
.TP
\fB-f files-per-dir\fR
The number of hunk files or subdirectories in each directory
in the 'big file' directory tree.  The default number is 100
entries per directory.
.TP
\fB-s hunk-size\fR
The size of each hunk file in megabytes.  The default hunk
size is one megabyte.
.TP
\fB-v\fR
Print verbose output as each directory and file is created.
The default is to quietly create the directory tree.
.SH "BUGS"
.PP
Currently, only the kernel module for Windows supports 'Big Files'.
.SH "AUTHORS"
.PP
.TP 0.2i
\(bu
Philip A. Nelson, August 2006
