#ifndef _BLURB_
#define _BLURB_
#/*
#
#            Coda: an Experimental Distributed File System
#                             Release 4.0
#
#          Copyright (c) 1987-1996 Carnegie Mellon University
#                         All Rights Reserved
#
#Permission  to  use, copy, modify and distribute this software and its
#documentation is hereby granted,  provided  that  both  the  copyright
#notice  and  this  permission  notice  appear  in  all  copies  of the
#software, derivative works or  modified  versions,  and  any  portions
#thereof, and that both notices appear in supporting documentation, and
#that credit is given to Carnegie Mellon University  in  all  documents
#and publicity pertaining to direct or indirect use of this code or its
#derivatives.
#
#CODA IS AN EXPERIMENTAL SOFTWARE SYSTEM AND IS  KNOWN  TO  HAVE  BUGS,
#SOME  OF  WHICH MAY HAVE SERIOUS CONSEQUENCES.  CARNEGIE MELLON ALLOWS
#FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.   CARNEGIE  MELLON
#DISCLAIMS  ANY  LIABILITY  OF  ANY  KIND  FOR  ANY  DAMAGES WHATSOEVER
#RESULTING DIRECTLY OR INDIRECTLY FROM THE USE OF THIS SOFTWARE  OR  OF
#ANY DERIVATIVE WORK.
#
#Carnegie  Mellon  encourages  users  of  this  software  to return any
#improvements or extensions that  they  make,  and  to  grant  Carnegie
#Mellon the rights to redistribute these changes without encumbrance.
#*/
#
#static char *rcsid = "/afs/cs/project/coda-rvb/cvs/src/coda-4.0.1/coda-src/rpc2/Makefile.coda.yuk,v 1.1.1.1 1996/11/22 19:07:54 rvb Exp";
#endif /*_BLURB_*/




#--- Begin environment definitions ---# 

CPP_pmax_mach  =/usr/cs/lib/cpp
CPP_i386_mach  =/usr/cs/lib/cpp
CPP_sun4_mach  =/usr/cs/lib/cpp
CPP_alpha_osf20=cpp
CPP_i386_nbsd1 =cpp
CPP            =$(CPP_${SYS})

LIBCOMPAT_pmax_mach  =
LIBCOMPAT_i386_mach  =
LIBCOMPAT_sun4_mach  =
LIBCOMPAT_alpha_osf20=
LIBCOMPAT_i386_nbsd1 = -lcompat
LIBCOMPAT            = $(LIBCOMPAT_${SYS})

CPU=${cputype}

# Choice of OLD or NEW lwps; default is old (non-cthread-based)
# set  LWPLIB to libnewlwp for cthread version.
# Also set MACHLIBS appropriately to include the mach cthread routines.
# LWPLIB = libnewlwp
# MACHLIBS = $(MACHDIR)/lib/libthreads$(UNDERSCOREP).a $(MACHDIR)/lib/libmach$(UNDERSCOREP).a

# Set MACHLIBS to null --- else you will get a bogus version of malloc()
LWPLIB = $(LIBOLDLWP)
MACHLIBS = 

# add SRCDIR/rpc2 to includes so internal includes from a shadow are found
CFLAGS = ${CFLAGS} -I$(SRCDIR)/rpc2 -DRPC2DEBUG

LIBS = $(LWPLIB) $(MACHLIBS) $(LIBCOMPAT)


#--- End environment definitions ---# 



# Recursively invoke real Makefile. Invoke via make, not build
#
# Suppress autocheckout from RCS; recursive make causes difficulty
#  in keeping around files long enough to copy in install step, but
#  not long enough to cause stale file problem

all ctest stest rpc2test librpc2.a libse.a clean: 
	$(MAKE)  -f Makefile.real $@ VPATH="$(VPATH)" CFLAGS="$(CFLAGS)" LIBS="$(LIBS)" CC="gcc" CPP="$(CPP)" CPU="$(CPU)"


libinstall: all
	-chmod 0644 ${LIBRPC2}
	${INSTALL} librpc2.a $(LIBRPC2)
	-chmod 0644 $(LIBSE)
	${INSTALL} libse.a ${LIBSE}

hdrinstall: rpc2.h se.h sftp.h multi.h rpc2.private.h  
	-chmod 0644 ${INCLDIR}/*
	for F in ${INCLSUBS}; do chmod 0755 "$$F"; done
	${INSTALL} $> ${INCLDIR}

srcinstall:
# Manually setenv SUPPRESS_ALPHACI if you want to suppress the RCS checkin by alphaci
	SRCDIR=$(SRCDIR); export SRCDIR; $(ALPHACI)

install: libinstall hdrinstall srcinstall
