%{#ifndef _BLURB_
#define _BLURB_
/*

            Coda: an Experimental Distributed File System
                             Release 4.0

          Copyright (c) 1987-1996 Carnegie Mellon University
                         All Rights Reserved

Permission  to  use, copy, modify and distribute this software and its
documentation is hereby granted,  provided  that  both  the  copyright
notice  and  this  permission  notice  appear  in  all  copies  of the
software, derivative works or  modified  versions,  and  any  portions
thereof, and that both notices appear in supporting documentation, and
that credit is given to Carnegie Mellon University  in  all  documents
and publicity pertaining to direct or indirect use of this code or its
derivatives.

CODA IS AN EXPERIMENTAL SOFTWARE SYSTEM AND IS  KNOWN  TO  HAVE  BUGS,
SOME  OF  WHICH MAY HAVE SERIOUS CONSEQUENCES.  CARNEGIE MELLON ALLOWS
FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.   CARNEGIE  MELLON
DISCLAIMS  ANY  LIABILITY  OF  ANY  KIND  FOR  ANY  DAMAGES WHATSOEVER
RESULTING DIRECTLY OR INDIRECTLY FROM THE USE OF THIS SOFTWARE  OR  OF
ANY DERIVATIVE WORK.

Carnegie  Mellon  encourages  users  of  this  software  to return any
improvements or extensions that  they  make,  and  to  grant  Carnegie
Mellon the rights to redistribute these changes without encumbrance.
*/

static char *rcsid = "$Header$";
#endif /*_BLURB_*/%}





/* res.rpc2 
 * Defines the resolution subsystem interface
 * 
 * Created Puneet Kumar, June 1990
 */
server prefix "RS";
client prefix "Res";

Subsystem "resolution";
#define RESOLUTIONSUBSYSID 5893

/* 
Return codes from the servers on resolution subsystem
*/
#define RES_FAILURE	-512
#define	RES_SUCCESS	0
#define RES_TIMEDOUT	-513
#define RES_NOTRUNT	-514
#define RES_BADOPLIST	-515

#include "vcrcommon.rpc2"

typedef RPC2_Struct
{
	RPC2_Integer	status;
	RPC2_Unsigned	Author;
	RPC2_Unsigned	Owner;
	RPC2_Unsigned	Date;
	RPC2_Unsigned 	Mode;
}	ResStatus;

typedef RPC2_Struct
{
	RPC2_Integer		LogSize;
	ViceVersionVector 	VV;
}	ResVolParm;

typedef RPC2_Struct
{
    VnodeId   vn;
    Unique_t    un;
    ViceVersionVector vv;
    ResStatus st;
}       ResPathElem;

typedef RPC2_Enum
{
	FetchStatus = 0,
	FetchSData = 1
}	ResFetchType;

typedef RPC2_Enum
{
	ResStoreStatus = 0,
	ResStoreData = 1
}	ResStoreType;

COP2		(IN ViceStoreId StoreId,
		 IN ViceVersionVector UpdateSet);

NewConnection	(IN RPC2_Integer SideEffectType,
		 IN RPC2_Integer SecurityLevel,
		 IN RPC2_Integer EncryptionType,
		 IN RPC2_Integer AuthType,
		 IN RPC2_CountedBS ClientIdent)
                 NEW_CONNECTION;

ForceFile   	(IN ViceFid Fid,
		 IN ResStoreType Request,
		 IN RPC2_Integer Length,
		 IN ViceVersionVector VV,
		 IN ResStatus Status,
		 IN OUT SE_Descriptor BD);

/* VV should be punted since it is available in ViceStatus */
LockAndFetch	(IN ViceFid Fid, 
		 IN ResFetchType Request, 
		 OUT ViceVersionVector VV,
		 OUT ResStatus rstatus, 
		 OUT RPC2_Integer logsize,
		 OUT ResPathElem path[]);

UnlockVol   	(IN VolumeId Vid);

MarkInc     	(IN ViceFid Fid);

FetchFile	(IN ViceFid Fid, 
		 IN RPC2_Unsigned PrimaryHost,
		 OUT ResStatus Status,
		 IN OUT SE_Descriptor BD);

ForceDirVV	(IN ViceFid Fid,
		 IN ViceVersionVector VV,
		 IN ViceStatus status);

DoForceDirOps	(IN ViceFid Fid,
		 IN ViceStatus status,
		 IN OUT RPC2_CountedBS AccessList,
		 OUT RPC2_Integer rstatus,
		 IN OUT SE_Descriptor sed);

GetForceDirOps  (IN ViceFid Fid,
		 OUT ViceStatus status, 
		 IN OUT RPC2_CountedBS AccessList,
		 IN OUT SE_Descriptor sed);

FetchLog	(IN ViceFid Fid,
		 OUT RPC2_Integer logsize,
		 IN OUT SE_Descriptor sed);

DirResPhase2	(IN ViceFid Fid,
		 IN ViceStoreId logid,
		 OUT ViceStatus status,
		 IN RPC2_BoundedBS pbinc);

DirResPhase1	(IN ViceFid Fid, 
		 IN RPC2_Integer size,
		 IN OUT ViceStatus status,
		 IN OUT RPC2_BoundedBS piggyinc,
		 IN OUT SE_Descriptor sed);

DirResPhase3	(IN ViceFid Fid,
		 IN ViceVersionVector UpdateSet,
		 IN OUT SE_Descriptor sed);

/* New calls with logs in rvm */
/* reuse DirResPhase2 and DirResPhase3 */
ResPhase2       (IN ViceFid Fid,
		 OUT RPC2_Integer logsize,
		 OUT RPC2_Integer nentries,
		 IN OUT SE_Descriptor sed);
		 
ResPhase3       (IN ViceFid Fid,
		 IN RPC2_Integer size,
		 IN RPC2_Integer totalentries,
		 IN OUT ViceStatus vstatus,
		 IN OUT RPC2_BoundedBS piggyinc,
		 IN OUT SE_Descriptor sed);

ResPhase34      (IN ViceFid Fid,
		 IN ViceStoreId logid,
		 OUT ViceStatus status,
		 IN RPC2_BoundedBS pbinc);

/* same as DirResPhase3 above */
ResPhase4	(IN ViceFid Fid,
		 IN ViceVersionVector UpdateSet,
		 IN OUT SE_Descriptor sed);

FetchDirContents (IN ViceFid fid,
		  OUT RPC2_Integer length,
		  OUT ViceStatus statu,
		  IN OUT SE_Descriptor sed);

ClearIncon      (IN ViceFid Fid,
		 IN ViceVersionVector VV);
		 
