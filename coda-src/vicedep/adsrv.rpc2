%{ /* BLURB lgpl

                           Coda File System
                              Release 5

          Copyright (c) 1987-1999 Carnegie Mellon University
                  Additional copyrights listed below

This  code  is  distributed "AS IS" without warranty of any kind under
the  terms of the  GNU  Library General Public Licence  Version 2,  as
shown in the file LICENSE. The technical and financial contributors to
Coda are listed in the file CREDITS.

                        Additional copyrights
                           none currently

#*/
%}

/*
 * adsrv.rpc2
 * Defines the Advice Server subsystem interface of Venus.
 *
 * Created by Maria Ebling, May 1993
 */

server prefix "S";
client prefix "C";

Subsystem "AdSrv";

#define ADSRVSUBSYSID 300

/* #define ADSRVPORTAL 1435  -- for fake_venus */


/* IMPORTANT!  Change this anytime this file is changed! */
#define ADSRV_VERSION 6

/* Keep this list in sync with the one in coda-src/venus/advice.cc! */
typedef RPC2_Enum
{
       TokensAcquiredID                    = 0,
       TokensExpiredID                     = 1,
       ActivityPendingTokensID             = 2,
       SpaceInformationID                  = 3,
       ServerAccessibleID                  = 4,
       ServerInaccessibleID                = 5,
       ServerConnectionStrongID            = 6,
       ServerConnectionWeakID              = 7,
       NetworkQualityEstimateID            = 8,
       VolumeTransitionEventID             = 9,
       ReconnectionID                      = 10,
       DataFetchEventID                    = 11,
       ReadDisconnectedCacheMissEventID    = 12,
       WeaklyConnectedCacheMissEventID     = 13,
       DisconnectedCacheMissEventID        = 14,
       HoardWalkAdviceRequestID            = 15,
       HoardWalkBeginID                    = 16,
       HoardWalkStatusID                   = 17,
       HoardWalkEndID                      = 18,
       HoardWalkPeriodicOnID               = 19,
       HoardWalkPeriodicOffID              = 20,
       ObjectInConflictID                  = 21,
       ObjectConsistentID                  = 22,
       ReintegrationPendingTokensID        = 23,
       ReintegrationEnabledID              = 24,
       ReintegrationActiveID               = 25,
       ReintegrationCompletedID            = 26,
       TaskAvailabilityID                  = 27,
       TaskUnavailableID                   = 28,
       ProgramAccessLogsID                 = 29,
       ReplacementLogsID                   = 30,
       InvokeASRID                         = 31
} InterestID;
#define MAXEVENTS 32
/* Keep this list in sync with the one in coda-src/venus/advice.cc! */

typedef RPC2_Struct
{
	InterestID interest;
	RPC2_Integer argument;
  	RPC2_Integer value;
} InterestValuePair;


typedef RPC2_Enum
{
	AgeLimit	= 0,  /* Set the age at which CML records become ripe for reintegration */
	ReintLimit	= 1,  /* Set the amount of time for a single trickle reintegration */
	ReintBarrier	= 2,  /* Set the reintegration barrier after this CML record */
	WeakThreshold	= 3   /* Set the BW threshold at which Venus declares a connection weak */
} ParameterID;

typedef RPC2_Struct
{
	ParameterID parameter;
	RPC2_Integer argument;
	RPC2_Integer value;
} ParameterValuePair;


typedef RPC2_Enum
{
	AddCMD 		= 0,  /* Add an entry to the hoard database: <pathname, priority, meta> */
	ClearCMD	= 1,  /* Clear all entries from the hoard database: <> */
	DeleteCMD	= 2,  /* Delete an entry from the hoard database: <pathname> */
	ListCMD		= 3,  /* List the commands: <filename> */
	OffCMD		= 4,  /* Turn periodic hoard walks off: <> */
	OnCMD		= 5,  /* Turn periodic hoard walks on: <> */
	WalkCMD		= 6,  /* Walk the database: <> */
	VerifyCMD	= 7   /* Verify the database: <filename> */
} HoardCommandID;

typedef RPC2_Enum
{
	NoneMETA		= 0,  /* No meta-information */
	ChildrenMETA		= 1,  /* Immediate children (current only) */
	ChildrenPlusMETA	= 2,  /* Immediate children (current and future) */
	DescendantsMETA		= 3,  /* All descendants (current only) */
	DescendantsPlusMETA	= 4   /* All descendants (current and future) */
} MetaInfoID;

typedef RPC2_Struct
{
	HoardCommandID command;
	RPC2_String pathname;
	RPC2_Integer priority;
	MetaInfoID meta;
} HoardCmd;

typedef RPC2_Struct
{
	RPC2_String name;
	RPC2_Integer bw;
} ServerEnt;

/*
 * NewAdviceService
 *
 * Advice Servers use this call to inform Venus of
 * their existance.
 */
1:NewAdviceService	(IN RPC2_String HostName,
			 IN RPC2_Integer UserID,
			 IN RPC2_Integer Port,
			 IN RPC2_Integer PGrpID,
			 IN RPC2_Integer AdSrvVersion,
			 IN RPC2_Integer AdMonVersion,
			 OUT RPC2_Integer VenusMajorVersionNum,
			 OUT RPC2_Integer VenusMinorVersionNum);

/*
 * ConnectionAlive
 *
 * Advice Servers use this call to make sure that the connection
 * to Venus is alive.
 */
2:ConnectionAlive(IN RPC2_Integer UserID);


/*
 * RegisterInterest
 *
 * Advice Servers use this call to inform Venus about
 * their interest in certain events.
 */
3:RegisterInterest	(IN RPC2_Integer UserID, IN InterestValuePair interests[]);

/*
 * GetServerInformation
 *
 * Advice Servers use this call to get a list of server names.
 */
4:GetServerInformation	(OUT ServerEnt servers[]);

/* 
 * GetCacheStatistics
 * 
 * Advice Servers use this call to get information about
 * space usage, both cache space and rvm space.
 */
5:GetCacheStatistics 	(OUT RPC2_Integer FilesAllocated,
			 OUT RPC2_Integer FilesOccupied,
			 OUT RPC2_Integer BlocksAllocated,
			 OUT RPC2_Integer BlocksOccupied,
			 OUT RPC2_Integer RVMAllocated,
			 OUT RPC2_Integer RVMOccupied);

/*
 * GetNextHoardWalk
 *
 * Advice Servers use this call to determine when the next
 * hoard walk is scheduled to occur.
 */
6:GetNextHoardWalk	(OUT RPC2_Integer nextWalkTimeSeconds);

/*
 *
 */
7:OutputUsageStatistics  (IN RPC2_Integer UserID, 
			  IN RPC2_String Pathname,
			  IN RPC2_Integer DisconnectionsSinceLastUse,
			  IN RPC2_Integer PercentDisconnectionsUsed,
			  IN RPC2_Integer TotalDisconnectionsUsed);

/* 
 * HoardCommands
 *
 * Advice Servers use this call to ship hoard commands to Venus.
 */
8:HoardCommands	(IN RPC2_Integer UserID, IN HoardCmd commands[]);


/*
 * SetParameters
 *
 * Advice Servers use this call to set Venus parameters dynamically.
 *
 */
9:SetParameters	(IN RPC2_Integer UserID, IN ParameterValuePair parameters[]);


/*
 * ResultOfASR
 *
 * Advice Servers use this call to return the result
 * of an ASR Invokation.
 */
10:ResultOfASR		(IN RPC2_Integer ASRid,
			 IN RPC2_Integer result);

/*
 * ImminentDeath
 *
 * Advice Servers use this call to inform Venus of
 * their imminent death (when they are being good
 * citizens).
 */
11:ImminentDeath	(IN RPC2_String HostName,
			 IN RPC2_Integer UserID,
			 IN RPC2_Integer Port);
