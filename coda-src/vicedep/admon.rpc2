%{#ifndef _BLURB_
#define _BLURB_
/*

            Coda: an Experimental Distributed File System
                             Release 4.0

          Copyright (c) 1987-1996 Carnegie Mellon University
                         All Rights Reserved

Permission  to  use, copy, modify and distribute this software and its
documentation is hereby granted,  provided  that  both  the  copyright
notice  and  this  permission  notice  appear  in  all  copies  of the
software, derivative works or  modified  versions,  and  any  portions
thereof, and that both notices appear in supporting documentation, and
that credit is given to Carnegie Mellon University  in  all  documents
and publicity pertaining to direct or indirect use of this code or its
derivatives.

CODA IS AN EXPERIMENTAL SOFTWARE SYSTEM AND IS  KNOWN  TO  HAVE  BUGS,
SOME  OF  WHICH MAY HAVE SERIOUS CONSEQUENCES.  CARNEGIE MELLON ALLOWS
FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.   CARNEGIE  MELLON
DISCLAIMS  ANY  LIABILITY  OF  ANY  KIND  FOR  ANY  DAMAGES WHATSOEVER
RESULTING DIRECTLY OR INDIRECTLY FROM THE USE OF THIS SOFTWARE  OR  OF
ANY DERIVATIVE WORK.

Carnegie  Mellon  encourages  users  of  this  software  to return any
improvements or extensions that  they  make,  and  to  grant  Carnegie
Mellon the rights to redistribute these changes without encumbrance.
*/

static char *rcsid = "$Header$";
#endif /*_BLURB_*/%}



server prefix "S";
client prefix "C";


Subsystem  "AdMon";

#define ADMONSUBSYSID 100

#define ADMONPORTAL 1433

#include "vcrcommon.rpc2"

/* IMPORTANT!  Change this anytime this file is changed! */
#define ADMON_VERSION 9

typedef RPC2_Enum
{
	False = 0,
	True = 1
} Boolean;

typedef RPC2_Enum
{
	FileAccess			= 0,
	ObjectNeedsRepair		= 1,
	ObjectNeedsReintegration	= 2
} ActivityID;

typedef RPC2_Enum
{
	EmulatingState 	= 0,
	HoardingState 	= 1,
	LoggingState	= 2,
	ResolvingState	= 3
} VolumeStateID;

typedef RPC2_Struct
{
	RPC2_Integer RQVersionNumber;
	RPC2_String VolumeName;
	VolumeId VID;
	RPC2_Unsigned CMLcount;
	RPC2_Unsigned TimeOfDisconnection;
	RPC2_Unsigned TimeOfReconnection; 
	RPC2_Unsigned TimeOfLastDemandHoardWalk;
	RPC2_Unsigned NumberOfReboots; 
	RPC2_Unsigned NumberOfCacheHits;
	RPC2_Unsigned NumberOfCacheMisses;
	RPC2_Unsigned NumberOfUniqueCacheHits;
	/* UniqueCacheMiss will be calculated by the advice monitor */
	RPC2_Unsigned NumberOfObjectsNotReferenced;
} ReconnectionQuestionnaire;
/* IMPORTANT!  Change this anytime you change this structure! */
#define RQ_VERSION 1


/*******************************************************************/

/* Administrivia */

/*
 * LostConnection
 *
 * Venus uses this call to inform an advice server that it has lost its 
 * connection, when it is able to behave as a good citizen.
 */
LostConnection();



/*******************************************************************/

/* Authentication Information */

TokensAcquired	(IN RPC2_Integer EndTimestamp);

TokensExpired	();

ActivityPendingTokens	(IN ActivityID activityType,
			 IN RPC2_String argument);




/*******************************************************************/

/* Space Information */

SpaceInformation(IN RPC2_Integer PercentFilesFilledByHoardedData,
		 IN RPC2_Integer PercentBlocksFilledByHoardedData,
		 IN RPC2_Integer PercentRVMFull,
		 IN Boolean RVMFragmented);



/*******************************************************************/

typedef RPC2_Struct
{
	RPC2_String ServerName;
	RPC2_Integer BandwidthEstimate;
	Boolean Intermittent;
} QualityEstimate;

/* Network Information */

ServerAccessible	(IN RPC2_String ServerName);
ServerInaccessible	(IN RPC2_String ServerName);
ServerConnectionStrong	(IN RPC2_String ServerName);
ServerConnectionWeak	(IN RPC2_String ServerName);
NetworkQualityEstimate	(IN QualityEstimate serverList[]);




/*******************************************************************/

/* 
 * Volume Transition Events
 *
 * Venus uses this call to inform the advice monitor that
 * a volume has transitioned to a new state.  
 */
VolumeTransitionEvent(IN RPC2_String VolumeName,
  		      IN RPC2_Integer vid,
		      IN VolumeStateID NewState,
		      IN VolumeStateID OldState);


/* 
 * Reconnection Questionnaire 
 * 
 * Venus uses this call to trigger a reconnection question.
 * This questionnaire is used to collect qualitative data
 * from users regarding the success of a disconnected session.
 */
Reconnection(IN ReconnectionQuestionnaire Questionnaire,
	     OUT RPC2_Integer ReturnCode);




/*******************************************************************/

/*  Advice Requests */

typedef RPC2_Enum
{
	Status = 0,
	Data = 1
} CacheMissType;

typedef RPC2_Enum
{
	FetchFromServers = 0,
	CoerceToMiss = 1
} CacheMissAdvice;
#define MaxCacheMissAdvice 1

typedef RPC2_Struct
{
	ViceFid Fid;
	RPC2_String Pathname;
} ObjectInformation;

typedef RPC2_Struct
{
 	RPC2_Integer pid;
} ProcessInformation;


/*
 * DataFetchEvent
 *
 * Venus uses this call to inform the advice monitor that a
 * data fetch is taking place.  This allows the advice
 * monitor to display a progress bar as the fetch takes place.
 */
DataFetchEvent		(IN RPC2_String Pathname,
			 IN RPC2_Integer Size,
			 IN RPC2_String Vfile);



ReadDisconnectedCacheMissEvent	(IN ObjectInformation objInfo,
				 IN ProcessInformation processInfo,
				 IN RPC2_Unsigned TimeOfMiss,
				 OUT CacheMissAdvice Advice,
				 OUT RPC2_Integer ReturnCode);


/*
 * WeaklyConnectedMiss
 *
 * Venus uses this call to inform an advice server that a request
 * during a weakly connected session is unavailable in the cache.
 */
WeaklyConnectedCacheMissEvent	(IN ObjectInformation objInfo,
				 IN ProcessInformation processInfo,
				 IN RPC2_Unsigned TimeOfMiss,
				 IN RPC2_Integer Length,
				 IN RPC2_Integer EstimatedBandwidth,
				 IN RPC2_String Vfile,
				 OUT CacheMissAdvice Advice,
				 OUT RPC2_Integer ReturnCode);

/* IMPORTANT!  Increment this anytime this call is changed! */
#define DMQ_VERSION 3
DisconnectedCacheMissEvent	(IN ObjectInformation objInfo,
				 IN ProcessInformation processInfo,
				 IN RPC2_Unsigned TimeOfMiss,
				 IN RPC2_Unsigned TimeOfDisconnection,
				 OUT RPC2_Integer ReturnCode);


/*
 * HoardWalkAdvice
 *
 * Venus uses this call to request advice about what objects
 * should be fetched in the process of a hoard walk.
 */
HoardWalkAdviceRequest	(IN RPC2_String InputPathname,
			 IN RPC2_String OutputPathname,
			 OUT RPC2_Integer ReturnCode);




/*******************************************************************/

/* Hoard Walk Information */

HoardWalkBegin();

HoardWalkStatus(IN RPC2_Integer Percentage);

HoardWalkEnd();

HoardWalkPeriodicOn();

HoardWalkPeriodicOff();




/*******************************************************************/

/* Repair Information */

ObjectInConflict	(IN RPC2_String Pathname,
			 IN ViceFid fid);

ObjectConsistent	(IN RPC2_String Pathname,
			 IN ViceFid fid);



/*******************************************************************/

/* Reintegration Information */

ReintegrationPendingTokens	(IN RPC2_String volumeID);

ReintegrationEnabled		(IN RPC2_String volumeID);

ReintegrationActive		(IN RPC2_String volumeID);

ReintegrationCompleted		(IN RPC2_String volumeID);




/*******************************************************************/

/* Task Information */
typedef RPC2_Struct
{
	RPC2_Integer TaskPriority;
	RPC2_Integer AvailableBlocks;
	RPC2_Integer UnavailableBlocks;
	RPC2_Integer IncompleteInformation;
} TallyInfo;

TaskAvailability	(IN TallyInfo taskList[]);

TaskUnavailable		(IN RPC2_Integer TaskPriority,
			 IN RPC2_Integer ElementSize);

ProgramAccessLogAvailable (IN RPC2_String LogFile);
ReplacementLogAvailable (IN RPC2_String LogFile);


/*******************************************************************/

/* Do we need this anymore??? */

/*
 * Resolution
 * 
 * Venus uses this call to invoke Application Specific Resolvers.
 */
InvokeASR	(IN RPC2_String Pathname, 
		 IN RPC2_Integer uid, 
		 OUT RPC2_Integer ASRid,
		 OUT RPC2_Integer ReturnCode);



