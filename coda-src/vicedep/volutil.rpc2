%{#ifndef _BLURB_
#define _BLURB_
/*

            Coda: an Experimental Distributed File System
                             Release 4.0

          Copyright (c) 1987-1996 Carnegie Mellon University
                         All Rights Reserved

Permission  to  use, copy, modify and distribute this software and its
documentation is hereby granted,  provided  that  both  the  copyright
notice  and  this  permission  notice  appear  in  all  copies  of the
software, derivative works or  modified  versions,  and  any  portions
thereof, and that both notices appear in supporting documentation, and
that credit is given to Carnegie Mellon University  in  all  documents
and publicity pertaining to direct or indirect use of this code or its
derivatives.

CODA IS AN EXPERIMENTAL SOFTWARE SYSTEM AND IS  KNOWN  TO  HAVE  BUGS,
SOME  OF  WHICH MAY HAVE SERIOUS CONSEQUENCES.  CARNEGIE MELLON ALLOWS
FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.   CARNEGIE  MELLON
DISCLAIMS  ANY  LIABILITY  OF  ANY  KIND  FOR  ANY  DAMAGES WHATSOEVER
RESULTING DIRECTLY OR INDIRECTLY FROM THE USE OF THIS SOFTWARE  OR  OF
ANY DERIVATIVE WORK.

Carnegie  Mellon  encourages  users  of  this  software  to return any
improvements or extensions that  they  make,  and  to  grant  Carnegie
Mellon the rights to redistribute these changes without encumbrance.
*/

static char *rcsid = "$Header$";
#endif /*_BLURB_*/%}




Server Prefix "S";
Subsystem "volUtil";

/* The portal for volume utility requests to the file server */
/* Must exist in /etc/services */
#define UTIL_PORTAL "dsys2"

/* subsystem id for volume utility requests to the file server */
#define UTIL_SUBSYSID	7777

#define VolName	"VolumeUtility"		/* identity of volume utility requests */
#define TKFile  "/vice/db/volutil.tk"	/* name of token key file */

#include "vcrcommon.rpc2"

typedef RPC2_Struct {
    RPC2_Integer nLargeVnodes;
    RPC2_Integer nSmallVnodes;
    RPC2_Integer DirPagesSize;
    RPC2_Integer LargeVnodeSize;
    RPC2_Integer SmallVnodeSize;
    RPC2_Integer VolumeSize;
} RVMSize_data;

1: VolSalvage(IN RPC2_String partition, IN RPC2_Unsigned VolumeNumber, IN RPC2_Integer force, IN RPC2_Integer debug, IN RPC2_Integer list);

2 :VolCreate(IN RPC2_String partition, IN RPC2_String volname, IN OUT VolumeId volid, IN RPC2_Integer repvol, IN VolumeId grpid);

3: VolInfo(IN RPC2_String volname, IN RPC2_Integer all, IN OUT SE_Descriptor sed);

4: VolMakeVLDB(IN RPC2_String infile);

5: VolMakeVRDB(IN RPC2_String infile);

6: VolShowVnode(IN RPC2_Unsigned volnumber, IN RPC2_Unsigned vnodeNumber, IN RPC2_Unsigned unique, IN OUT SE_Descriptor sed);

7: VolSetVV(IN RPC2_Unsigned volnumber, IN RPC2_Unsigned vnodeNumber, IN RPC2_Unsigned unique, IN  ViceVersionVector vv);

8: VolPurge(IN RPC2_Unsigned volid, IN RPC2_String volname);

9: VolLookup(IN RPC2_String vol, IN OUT SE_Descriptor sed);

10: VolUpdateDB();

11: VolShutdown();

12: VolSwaplog();

13: VolSetDebug(IN RPC2_Integer debuglevel);

14 : VolDump();	/* Place holder, replaced by next call. */

15: VolNewDump(IN RPC2_Unsigned volid, IN OUT RPC2_Unsigned Incremental);

16: VolClone(IN RPC2_Unsigned ovolid, IN RPC2_String newvolname, OUT RPC2_Unsigned cloneId);

17: VolRestore(IN RPC2_String partname, IN RPC2_String volname, IN OUT RPC2_Unsigned volid);

18: VolMerge();

19: VolMakeBackups(IN VolumeId Vid, OUT VolumeId BackupVid);

20: VolMarkAsAncient(IN VolumeId GroupId, IN VolumeId RepId);   /* In vol-backup.c */

/* VolChkRec(IN RPC2_Unsigned volid); */

21: VolDumpMem(IN  RPC2_String filename, IN RPC2_Unsigned address, IN RPC2_Unsigned size);

/* VolDumpRecStore(IN RPC2_Unsigned volid, IN RPC2_String fname); */

22: VolLock(IN VolumeId Vid, OUT ViceVersionVector VolVV);

23: VolUnlock(IN VolumeId Vid);

24: VolRVMSize(IN VolumeId VolID, OUT RVMSize_data data);

25: VolSetLogParms(IN VolumeId Vid, IN RPC2_Integer OnFlag, IN RPC2_Integer maxentries);

26: VolTiming(IN RPC2_Integer on, IN OUT SE_Descriptor sed);

27: VolElapse(IN RPC2_Integer on, IN RPC2_Integer subid, IN RPC2_Integer multi);

28: PrintStats(IN OUT SE_Descriptor sed);

29: TraceRpc(IN OUT SE_Descriptor sed);

30: ShowCallbacks	(IN ViceFid fid,
		 IN OUT SE_Descriptor sed);

31: TruncateRVMLog();

32: VolGetMaxVolId(OUT RPC2_Integer maxid);

33: VolSetMaxVolId(IN RPC2_Integer newid);

34: VolPeekInt(IN RPC2_String address, OUT RPC2_Integer pvalue);

35: VolPokeInt(IN RPC2_String address, IN RPC2_Integer value);

36: VolPeekMem(IN RPC2_String address, IN OUT RPC2_BoundedBS buf);

37: VolPokeMem(IN RPC2_String address, IN RPC2_CountedBS buf);

38: VolSwapmalloc();
