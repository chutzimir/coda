%{ /* BLURB lgpl

                           Coda File System
                              Release 5

          Copyright (c) 1987-1999 Carnegie Mellon University
                  Additional copyrights listed below

This  code  is  distributed "AS IS" without warranty of any kind under
the  terms of the  GNU  Library General Public Licence  Version 2,  as
shown in the file LICENSE. The technical and financial contributors to
Coda are listed in the file CREDITS.

                        Additional copyrights
                           none currently

#*/
%}

/* adv_skk.rpc2 Advice Sidekick subsystem.
 * Defines RPC2 calls which Venus can make to the Advice Sidekick.
 * 
 * July 2000	Created.	-Remington
 */

server prefix "S";
client prefix "C";

Subsystem  "AdvSkk";

#define AS_SUBSYSID 100
#define AS_PORTAL 1433

#define SKK_FAIL -1
#define SKK_SUCCESS 0
#define SKK_DUPLICATE 1

#include "vcrcommon.rpc2"

/*******************************************************************/

typedef RPC2_Enum
{
	False = 0,
	True = 1
} Boolean;

typedef RPC2_Enum
{
	FileAccess			= 0,
	ObjectNeedsRepair		= 1,
	ObjectNeedsReintegration	= 2
} ActivityID;

typedef RPC2_Enum
{
	EmulatingState 	= 0,
	HoardingState 	= 1,
	LoggingState	= 2,
	ResolvingState	= 3
} VolumeStateID;

typedef RPC2_Struct
{
	RPC2_Integer RQVersionNumber;
	RPC2_String VolumeName;
	VolumeId VID;
	RPC2_Unsigned CMLcount;
	RPC2_Unsigned TimeOfDisconnection;
	RPC2_Unsigned TimeOfReconnection; 
	RPC2_Unsigned TimeOfLastDemandHoardWalk;
	RPC2_Unsigned NumberOfReboots; 
	RPC2_Unsigned NumberOfCacheHits;
	RPC2_Unsigned NumberOfCacheMisses;
	RPC2_Unsigned NumberOfUniqueCacheHits;
	/* UniqueCacheMiss will be calculated by the advice monitor */
	RPC2_Unsigned NumberOfObjectsNotReferenced;
} ReconnectionQuestionnaire;

typedef RPC2_Struct
{
	RPC2_String ServerName;
	RPC2_Integer BandwidthEstimate;
	Boolean Intermittent;
} QualityEstimate;

typedef RPC2_Enum
{
	Status = 0,
	Data = 1
} CacheMissType;

typedef RPC2_Enum
{
	FetchFromServers = 0,
	CoerceToMiss = 1
} CacheMissAdvice;
#define MaxCacheMissAdvice 1

typedef RPC2_Struct
{
	ViceFid Fid;
	RPC2_String Pathname;
} ObjectInformation;

typedef RPC2_Struct
{
 	RPC2_Integer pid;
} ProcessInformation;

typedef RPC2_Struct
{
	RPC2_Integer TaskPriority;
	RPC2_Integer AvailableBlocks;
	RPC2_Integer UnavailableBlocks;
	RPC2_Integer IncompleteInformation;
} TallyInfo;

/*******************************************************************/

/* Cmd == 1, ping sidekick (are you there?)
 * Cmd == 0, tell sidekick its connection is lost */
1:Spike(IN RPC2_Integer Cmd);

2:TokensAcquired(IN RPC2_Integer EndTimestamp);
3:TokensExpired();
4:ActivityPendingTokens(IN ActivityID activityType, IN RPC2_String argument);

5:SpaceInformation(IN RPC2_Integer PercentFilesFilledByHoardedData,
	  	   IN RPC2_Integer PercentBlocksFilledByHoardedData,
		   IN RPC2_Integer PercentRVMFull,
		   IN Boolean RVMFragmented);

6:ServerAccessible	 (IN RPC2_String ServerName);
7:ServerInaccessible	 (IN RPC2_String ServerName);
8:ServerConnectionStrong (IN RPC2_String ServerName);
9:ServerConnectionWeak 	 (IN RPC2_String ServerName);
10:NetworkQualityEstimate(IN QualityEstimate serverList[]);

/* Tell Sidekick that a volume has transitioned to a new state. */
11:VolumeTransitionEvent(IN RPC2_String VolumeName,
  		         IN RPC2_Integer vid,
		         IN VolumeStateID NewState,
		         IN VolumeStateID OldState);

/* Get Sidekick to trigger a reconnection questionnaire. */
12:Reconnection(IN ReconnectionQuestionnaire Questionnaire,
	        OUT RPC2_Integer ReturnCode);

/* Tell the sidekick that a data fetch is taking place.  
 * (So that the sidekick can display a progress bar.) */
13:DataFetchEvent(IN RPC2_String Pathname, IN RPC2_Integer Size, IN RPC2_String Vfile);

14:ReadDisconnectedCacheMissEvent(IN ObjectInformation objInfo,
				  IN ProcessInformation processInfo,
				  IN RPC2_Unsigned TimeOfMiss,
				  OUT CacheMissAdvice Advice,
				  OUT RPC2_Integer ReturnCode);

/* Tell the sidekick that a request during a weakly connected session is unavailable in the cache. */
15:WeaklyConnectedCacheMissEvent(IN ObjectInformation objInfo,
				 IN ProcessInformation processInfo,
				 IN RPC2_Unsigned TimeOfMiss,
				 IN RPC2_Integer Length,
				 IN RPC2_Integer EstimatedBandwidth,
				 IN RPC2_String Vfile,
				 OUT CacheMissAdvice Advice,
				 OUT RPC2_Integer ReturnCode);

16:DisconnectedCacheMissEvent(IN ObjectInformation objInfo,
			      IN ProcessInformation processInfo,
			      IN RPC2_Unsigned TimeOfMiss,
			      IN RPC2_Unsigned TimeOfDisconnection,
			      OUT RPC2_Integer ReturnCode);

/* Request advice about what objects should be fetched in a hoard walk. */
17:HoardWalkAdviceRequest(IN RPC2_String InputPathname,
			  IN RPC2_String OutputPathname,
			  OUT RPC2_Integer ReturnCode);

/* Hoard Walk Information */

18:HoardWalkBegin();
19:HoardWalkStatus(IN RPC2_Integer Percentage);
20:HoardWalkEnd();
21:HoardWalkPeriodicOn();
22:HoardWalkPeriodicOff();

/* Repair Information */

23:ObjectInConflict(IN RPC2_String Pathname, IN ViceFid fid);
24:ObjectConsistent(IN RPC2_String Pathname, IN ViceFid fid);

/* Reintegration Information */

25:ReintegrationPendingTokens	(IN RPC2_String volumeID);
26:ReintegrationEnabled		(IN RPC2_String volumeID);
27:ReintegrationActive		(IN RPC2_String volumeID);
28:ReintegrationCompleted	(IN RPC2_String volumeID);

/* Task Information */

29:TaskAvailability(IN TallyInfo taskList[]);
30:TaskUnavailable(IN RPC2_Integer TaskPriority, IN RPC2_Integer ElementSize);
31:ProgramAccessLogAvailable(IN RPC2_String LogFile);
32:ReplacementLogAvailable(IN RPC2_String LogFile);

/* Invoke an Application Specific Resolver. */
33:InvokeASR(IN RPC2_String Pathname, IN RPC2_Integer vid, IN RPC2_Integer vuid, 
	     OUT RPC2_Integer ASRid, OUT RPC2_Integer ReturnCode);
