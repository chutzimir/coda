proc InitSystemAdministrator { } {
    global SysAdmin

    set SysAdmin(Coda) "Henry Pierce at hmpierce@cs.cmu.edu or x8-7557"
}

proc InitPathnamesArray { } {
    global Pathnames
    global user

    set Pathnames(venus.cache) /usr/coda/venus.cache

    # Password file
    set Pathnames(passwd) /etc/passwd

    set Pathnames(home) /coda/usr/$user
    if { [file isdirectory $Pathnames(home)] == 0 } then {
	SendToStdErr "InitPathnamesArray: The directory $Pathnames(home) does not exist.  Please create it."
	exit
    }

    set Pathnames(newHoarding) $Pathnames(home)/newHoarding
    if { [file isdirectory $Pathnames(home)/newHoarding] == 0 } then {
	SendToStdErr "Initializing $Pathnames(home)/newHoarding directory"
	exec mkdir $Pathnames(home)/newHoarding
    } 

    set Pathnames(advicerc) $Pathnames(home)/.advicerc
    if { [file exists $Pathnames(home)/.advicerc] == 0 } then {
	InitAdviceRC $Pathnames(home)/.advicerc
    }

    # The ++ notation below is replaced by the Makefile
    set Pathnames(cfs) +CFS+
    set Pathnames(ctokens) +CTOKENS+
    set Pathnames(clog) +CLOG+
    set Pathnames(cunlog) +CUNLOG+
    set Pathnames(vutil) +VUTIL+
    set Pathnames(hoard) +HOARD+

    set Pathnames(awk) +AWK+
    set Pathnames(cp) +CP+
    set Pathnames(df) +DF+
    set Pathnames(grep) +GREP+
    set Pathnames(hostname) +HOSTNAME+
}

proc InitAdviceRC { path } {

    SendToStdErr "Initializing $path"
    set AdviceRC [open $path {WRONLY CREAT}]

    puts $AdviceRC "#"
    puts $AdviceRC "# Event Configuration"
    puts $AdviceRC "#"
    puts $AdviceRC "Event:TokensAcquired:N:1:0:0:0"
    puts $AdviceRC "Event:TokenExpiry:W:1:0:0:0"
    puts $AdviceRC "Event:ActivityPendingTokens:C:1:0:0:1"
    puts $AdviceRC "Event:SpaceNormal:N:1:0:0:0"
    puts $AdviceRC "Event:SpaceWarning:W:1:0:0:0"
    puts $AdviceRC "Event:SpaceCritical:C:1:0:0:0"
    puts $AdviceRC "Event:OperatingStronglyConnected:N:1:0:0:0"
    puts $AdviceRC "Event:OperatingWeaklyConnected:W:1:0:0:0"
    puts $AdviceRC "Event:OperatingDisconnected:C:1:0:0:0"
    puts $AdviceRC "Event:WeaklyConnectedCacheMissAdvice:C:1:0:0:1"
    puts $AdviceRC "Event:ReadDisconnectedCacheMissAdvice:W:0:0:0:0"
    puts $AdviceRC "Event:DisconnectedCacheMissAdvice:W:0:0:0:0"
    puts $AdviceRC "Event:ReconnectionSurvey:W:0:0:0:1"
    puts $AdviceRC "Event:HoardWalkBegin:W:1:0:0:0"
    puts $AdviceRC "Event:HoardWalkPendingAdvice:C:1:0:0:0"
    puts $AdviceRC "Event:HoardWalkEnd:N:1:0:0:0"
    puts $AdviceRC "Event:HoardWalkOff:N:1:0:0:0"
    puts $AdviceRC "Event:HoardWalkOn:N:1:0:0:0"
    puts $AdviceRC "Event:ReintegrationPending:C:1:0:0:0"
    puts $AdviceRC "Event:ReintegrationCompleted:N:1:0:0:0"
    puts $AdviceRC "Event:RepairPending:C:1:0:0:0"
    puts $AdviceRC "Event:RepairCompleted:N:1:0:0:0"
    puts $AdviceRC "Event:AllTasksAvailable:N:1:0:0:0"
    puts $AdviceRC "Event:OneOrMoreTasksUnavailable:C:1:0:1:1"
    puts $AdviceRC "#"
    puts $AdviceRC "# Color Configuration"
    puts $AdviceRC "#"
    puts $AdviceRC "Color:Normal:ForestGreen"
    puts $AdviceRC "Color:Warning:Gold"
    puts $AdviceRC "Color:Critical:OrangeRed1"
    puts $AdviceRC "#"
    puts $AdviceRC "# Behavior Configuration"
    puts $AdviceRC "#"
    puts $AdviceRC "Behavior:data:off"
    puts $AdviceRC "Behavior:program:off"
    puts $AdviceRC "Behavior:task:off"

    flush $AdviceRC
    close $AdviceRC
}

proc InitDimensionsArray { } {
    global Dimensions

    set Dimensions(Meter:Height) 50
    set Dimensions(Meter:Gauge:Top) 10
    set Dimensions(Meter:Gauge:Bottom) 30

    set Dimensions(Meter:Width) 300
    set Dimensions(Meter:Gauge:Left) 100
    set Dimensions(Meter:Gauge:Right) 290

    set Dimensions(ProgressBar:Width) 150
    set Dimensions(ProgressBar:Height) 20

}

proc InitColorArray { } {
    global Colors 

    # Initialize a list of possible colors
    set Colors(List) "Red OrangeRed1 DarkOrange1 Orange Gold Yellow LimeGreen ForestGreen DarkGreen SteelBlue CornflowerBlue LightSteelBlue1 MediumPurple1 DarkOrchid grey29 grey45 grey77 grey100"

    #
    # Initialize the colors for the different levels of urgency
    #
    set Colors(Unknown)  gray25
    set Colors(Normal)   ForestGreen
    set Colors(Warning)  Gold
    set Colors(Critical) Red
    set Colors(UnFlash)  gray25

    # Initialize other colors
    set Colors(disabled) gray50

    # Initialize the colors for the different things
    set Colors(meter) SlateGray
}

proc GetColorFromUrgency { urgency } {
    global Colors

    return $Colors($urgency)
}


proc InitDisplayStyleArray { } {
    global DisplayStyle
    global Colors

    set DisplayStyle(Normal) \
	[tixDisplayStyle text -font *times-medium-r-*-*-14* -background gray92]

    set DisplayStyle(Centered) \
	[tixDisplayStyle text -font *times-medium-r-*-*-14* -background gray92 -anchor c]

    set DisplayStyle(Bold) \
	[tixDisplayStyle text -font *times-bold-r-*-*-14* -background gray92]

    set DisplayStyle(Italic) \
	[tixDisplayStyle text -font *times-medium-i-*-*-14* -background gray92]

    set DisplayStyle(BoldItalic) \
	[tixDisplayStyle text -font *times-bold-i-*-*-14* -background gray92]

    foreach color $Colors(List) {
	set DisplayStyle($color) \
	    [tixDisplayStyle text -font *times-bold-r-*-*-14* -foreground $color -background gray92]
    }

    set DisplayStyle(Header) \
	[tixDisplayStyle text \
		-fg black -anchor c \
		-padx 8 -pady 2 \
		-font *times-bold-r-*-*-14* \
		-background gray92]
	
}

