#!/bin/sh
# The next line restarts using wish\
exec /coda/misc/tcl/@sys/beta/bin/wish  "$0" "$@"
#ifndef _BLURB_
#define _BLURB_
#/*
#
#            Coda: an Experimental Distributed File System
#                             Release 4.0
#
#          Copyright (c) 1987-1996 Carnegie Mellon University
#                         All Rights Reserved
#
#Permission  to  use, copy, modify and distribute this software and its
#documentation is hereby granted,  provided  that  both  the  copyright
#notice  and  this  permission  notice  appear  in  all  copies  of the
#software, derivative works or  modified  versions,  and  any  portions
#thereof, and that both notices appear in supporting documentation, and
#that credit is given to Carnegie Mellon University  in  all  documents
#and publicity pertaining to direct or indirect use of this code or its
#derivatives.
#
#CODA IS AN EXPERIMENTAL SOFTWARE SYSTEM AND IS  KNOWN  TO  HAVE  BUGS,
#SOME  OF  WHICH MAY HAVE SERIOUS CONSEQUENCES.  CARNEGIE MELLON ALLOWS
#FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.   CARNEGIE  MELLON
#DISCLAIMS  ANY  LIABILITY  OF  ANY  KIND  FOR  ANY  DAMAGES WHATSOEVER
#RESULTING DIRECTLY OR INDIRECTLY FROM THE USE OF THIS SOFTWARE  OR  OF
#ANY DERIVATIVE WORK.
#
#Carnegie  Mellon  encourages  users  of  this  software  to return any
#improvements or extensions that  they  make,  and  to  grant  Carnegie
#Mellon the rights to redistribute these changes without encumbrance.
#*/
#
#static char *rcsid = "$Header$";
#endif /*_BLURB_*/


#
# A nice interface to the disconnected cache miss questionnaire
#
# History :
#  94/4/6 : mre@cs.cmu.edu : code
#

#
#
#

proc Quit {} {
	destroy .
	exit 0
}

proc quit {} {
	global Practice
	global Determined
	global argv
	global Sanitized

	SanityCheck [.affect.scale get] $Determined
	if { $Sanitized == 0 } {
		return
	}

        set outFileName [lindex $argv 0]
        set outFile [open $outFileName a]

	puts $outFile [format "Practice: %d" $Practice]
	OutputAffect $outFile
	OutputComments $outFile
	Quit
}

proc PopUpDialog {} {

	toplevel .panel
	message .panel.msg \
		-text "\nPlease choose a value from 1 to 6 by clicking the mouse\nover your selection." \
		-justify left \
		-width "5i"
	button .panel.ok \
		-text "OK" \
		-relief groove \
		-bd 6 \
		-command "destroy .panel"
	pack append .panel \
		.panel.msg	{top fill} \
		.panel.ok	{pady 10 padx 10}
        bind .panel <Return> { destroy .panel }
	grab set .panel
	tkwait window .panel
}

proc PopUpHelp { } {

        set helpmsg "\nA cache miss has occurred while disconnected.  It cannot be filled because 
there is no connection to the servers.  The purpose of this questionnaire is to determine how\
important this file is to your work.  By answering this questionnaire, you will help us to\
evaluate the Coda file system.  There are no wrong answers to these questions.\n\
\nThe most important question is how much you believe this cache miss will affect your current work.\
We ask that you choose a value between 1 (the cache miss will not affect you at all -- except for\
having to answer these questions) and 6 (the cache miss will seriously impede your progress).\
We realize that in some situations this question cannot be answered so you can check the 'It cannot\
be determined' box in this case.  We also realize that some disconnected sessions are really\
practice disconnections.  In this case, we ask that you pretend this had been a real disconnected\
session in order to answer the question and that you check the 'This is a practice disconnection'\
box.  If you have other comments, you can write them in the box provided.\n\n
Keyboard accelerators are provided for your convenience:\n
\t1-6\tto select that answer\n\
\td\tto check the 'It cannot be determined' box \n\
\tp\tto check the 'This is a practice disconnection' box \n\
\tc\tto move the focus to the comment entry area \n\
\t^D\tto move the focus out of the comments entry area \n\
\th or ?\tto see this message \n\
\t<Return>\tto click the 'Done' button \n"

	toplevel .help
        wm geometry .help -5-25
	message .help.msg \
		-text $helpmsg \
		-justify left \
		-width "7i" 
	button .help.ok \
		-text "OK" \
		-relief groove \
		-bd 6 \
		-command "destroy .help"
	pack .help.msg -side top -fill both -expand true
	pack .help.ok -side top -padx 10 
	bind .help <Return> {destroy .help}
	grab set .help
	tkwait window .help
}

proc SanityCheck {scale_value be_determined} {
	global Sanitized

	set Sanitized 1
	if { $scale_value == 0 } {
		if { $be_determined == 0 } {
			PopUpDialog
			set Sanitized 0
		}
	}
}

proc labeltext {path text length} {
    frame $path 
    label $path.label -text $text
	
    text $path.text -relief raised -bd 2 -height 3 -width 60\
	-yscrollcommand "$path.scroll set"
    scrollbar $path.scroll -command "$path.text yview"

    bind $path.text <BackSpace> { }
    bind Text <Delete> { }
    bind $path.text <Delete> { 
	if {[%W tag nextrange sel 1.0 end] != "" } then {
	    %W delete sel.first sel.last
	} else {
	    %W delete insert-1c
	}
    }

    pack append $path $path.label {left frame nw} $path.text {left} $path.scroll {left filly}
}

proc labelentry {path text length} {
    frame $path
    label $path.label -text $text 
    entry $path.entry -width $length -relief sunken

    bind Entry <Delete> {puts "foo" }
    bind $path.entry <Delete> { 
	puts "bar"
	if [ %W selection present ] {
	    %W delete sel.first sel.last
	} else {
	    tkEntryBackspace %W
	}
    }

    pack append $path $path.label {left expand} $path.entry {right expand}

}

proc PresentInfo {} {
	global fontinfo
	global argv

	#
        # Informational Dialog
        #

        frame .info -relief raised -borderwidth 2
        message .info.msg \
		-text "\nA disconnected cache miss has occurred on the object `[lindex $argv 1]'.\nThe object was referenced by `[lindex $argv 2]'." \
                -justify left \
                -width "6i"

        pack append .info \
                .info.msg       {top fill}

}

proc SetAffectScale {} {
	global Determined

	if { $Determined } {
		.affect.scale set 0
	}
}

proc ResetDetermined {value} {
	global Determined

	if { $value > 0 } {
		set Determined 0
	}
}

proc QuestionAffect {} {
	global fontinfo

	#
	# Affect of cache miss?
	#

	frame .affect -relief raised -borderwidth 2
	message .affect.msg \
		-text "How much do you believe this cache miss will affect your current work?" \
		-justify left \
		-width "6i"
	scale .affect.scale -from 0 -to 6 -length 400 -tickinterval 1 \
		-label "Invalid | Not at all!                                    Seriously Impede!" \
		-orient horizontal \
		-activebackground Gray \
		-command ResetDetermined


	frame .affect.cbs -relief flat -borderwidth 2

	checkbutton .affect.cbs.determined \
		-text "It cannot be determined." \
		-variable Determined \
		-command SetAffectScale

	checkbutton .affect.cbs.practice \
		-text "This is a practice disconnection." \
		-variable Practice 

	pack append .affect.cbs \
		.affect.cbs.determined	{left padx 100} \
		.affect.cbs.practice {right padx 10}

	pack append .affect \
		.affect.msg 	{top frame nw} \
		.affect.scale 	{top} \
		.affect.cbs {top frame nw}
}

proc OutputAffect {outFile} {
	puts $outFile [format "ExpectedAffect: %s" [.affect.scale get]]
}

proc PresentComments {} {
	global fontinfo

	frame .comments -relief raised -borderwidth 2
	labeltext .comments.label "Other comments:" 50

	pack append .comments .comments.label {top frame nw}
}

proc OutputComments {outFile} {
	puts $outFile [format "OtherComments:\n%s\nEndComment.\n" [.comments.label.text get 1.0 end]]
}

proc PresentOtherOptions {} {
	global fontinfo

	frame .other -relief raised -borderwidth 2
	button .other.donebutton \
		-command quit \
		-relief groove \
		-bd 6 \
		-text "Done" \
		-state active
	button .other.helpbutton \
		-command PopUpHelp \
		-relief groove \
		-bd 2 \
		-text "Help" \
		-state active

	pack .other.donebutton -side right -pady 10 -padx 10
	pack .other.helpbutton -side left -pady 10 -padx 10
}

proc KeyboardAccelerators { } {
    bind . <Any-KeyPress> { Accelerate %W %K }
    bind .comments.label.text <Control-d> {focus .}
    bindtags .affect.scale { .affect.scale . all }


    bind .affect.scale <ButtonPress-1> {
	global ButtonPressed

	set ButtonPressed 1
    }

    bind .affect.scale <Motion> {
	global ButtonPressed

	if { $ButtonPressed == 1 } then {
	    set newValue [.affect.scale get %x %y]
            .affect.scale set $newValue
	}	
    }

    bind .affect.scale <ButtonRelease-1> { 
	global ButtonPressed

	set ButtonPressed 0
        set newValue [.affect.scale get %x %y]
        .affect.scale set $newValue
    }
}

proc Accelerate { window keysym } {
    if { $window == ".comments.label.text" } then {
	return
    }

    switch -regexp $keysym {
	[0-6]       { .affect.scale set $keysym }
	p	    { Toggle Practice }
	d	    { Toggle Determined }
	c	    { focus .comments.label.text }

	h	    { PopUpHelp }
	"question"  { PopUpHelp }

 	"Return"    { quit }

	default     { } # IGNORE
    }
}

proc Toggle { variablename } {
    upvar #0 $variablename var

    if { $var == 0 } then { set var 1 } else { set var 0 }
}
#
# Check that we have precisely 2 arguments.
#

if { $argc != 3 } then {
	puts "Usage: discomiss outfile pathname program"
	puts "       where outfile is the name of the output file"
	puts "       where pathname is the name of an object not in the cache"
	puts "       where program is the name of the program referencing the object"
	exit 1
}

#
# Create all windows
#
PresentInfo
QuestionAffect
PresentComments
PresentOtherOptions
KeyboardAccelerators

set ButtonPressed 0

wm geometry . +0+0
wm title . "Disconnected Cache Miss Questionnaire"

pack append . .info	{top fill pady 10 expand} 
pack append . .affect	{top fill pady 10 expand} 
pack append . .comments {top fill pady 10 expand}
pack append . .other	{top fill pady 10 expand}

#
# Now, wait for user actions...
#

