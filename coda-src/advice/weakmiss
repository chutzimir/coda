#!/bin/sh
# The next line restarts using wish\
exec /coda/misc/tcl/@sys/beta/bin/wish  "$0" "$@"
#ifndef _BLURB_
#define _BLURB_
#/*
#
#            Coda: an Experimental Distributed File System
#                             Release 4.0
#
#          Copyright (c) 1987-1996 Carnegie Mellon University
#                         All Rights Reserved
#
#Permission  to  use, copy, modify and distribute this software and its
#documentation is hereby granted,  provided  that  both  the  copyright
#notice  and  this  permission  notice  appear  in  all  copies  of the
#software, derivative works or  modified  versions,  and  any  portions
#thereof, and that both notices appear in supporting documentation, and
#that credit is given to Carnegie Mellon University  in  all  documents
#and publicity pertaining to direct or indirect use of this code or its
#derivatives.
#
#CODA IS AN EXPERIMENTAL SOFTWARE SYSTEM AND IS  KNOWN  TO  HAVE  BUGS,
#SOME  OF  WHICH MAY HAVE SERIOUS CONSEQUENCES.  CARNEGIE MELLON ALLOWS
#FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.   CARNEGIE  MELLON
#DISCLAIMS  ANY  LIABILITY  OF  ANY  KIND  FOR  ANY  DAMAGES WHATSOEVER
#RESULTING DIRECTLY OR INDIRECTLY FROM THE USE OF THIS SOFTWARE  OR  OF
#ANY DERIVATIVE WORK.
#
#Carnegie  Mellon  encourages  users  of  this  software  to return any
#improvements or extensions that  they  make,  and  to  grant  Carnegie
#Mellon the rights to redistribute these changes without encumbrance.
#*/
#
#static char *rcsid = "/afs/cs/project/coda-rvb/cvs/src/coda-4.0.1/coda-src/advice/weakmiss,v 1.1.1.1 1996/11/24 21:48:15 rvb Exp";
#endif /*_BLURB_*/


#
# Inform the user that a weak miss has occurred.
#
# History :
#  95/10/20 : mre@cs.cmu.edu : code
#

#
#
#

if { $argc != 3 } then {
	puts "Usage: weak_miss object_info requesting_program expected_fetch_time"
	exit 1
}


wm geometry . +0+0

set w .
set title "Weak Miss"
set text [format "File: %s\nRequesting Program: %s\nEstimated Fetch Time:  %s secs" [lindex $argv 0] [lindex $argv 1] [lindex $argv 2]]
set bitmap {}
# The default is set to argument #0 (Fetch)
set default 0
set args [list Fetch {Coerce to Miss}]

#
# 1. Create the top-level window and divide it into top and bottom.
#

wm title . $title
wm iconname . Dialog
frame .top -relief raised -bd 1
pack append  . .top {top fillx filly}
frame .bottom -relief raised -bd 1
pack append . .bottom {bottom fillx filly}


#
# 2. Fill the top part with the bitmap and message.
#

message .top.msg -width 6i -text $text
pack append .top .top.msg \
	{right expand fillx filly padx 3m pady 3m}
if {$bitmap != ""} {
	label .top.bitmap -bitmap $bitmap
	pack append .top .top.bitmap {left padx 3m pady 3m}
}
	

#
# 3. Create a row of buttons at the bottom of the dialog.
#
	
set i 0
foreach b $args {
	if {$i == $default} {
		button .bottom.button$i -text $b -command "set button $i" -bd 6
		frame .bottom.default -relief sunken -bd 1
		raise .bottom.button$i
		pack append .bottom .bottom.default \
			{left expand padx 3m pady 2m}
		pack append .bottom .bottom.button$i \
			{left padx 2m pady 2m}
	} else {
		button .bottom.button$i -text $b -command "set button $i" -bd 2
		pack append .bottom .bottom.button$i \
			{left expand padx 3m pady 3m}
	}
	incr i
}

	
#
# 4. Set up a binding for <Return>, if there's a default.
#    Set a grab and claim the focus, too.
#

if {$default >= 0} {
	bind . <Return> ".bottom.button$default flash; \
		set button $default"
}

#
# 5. Set a timer for 15 seconds.  If the user doesn't respond
#    in that timeframe, just fetch the file anyway.
#
after 15000 {set button 0}
	
#
# 6. Wait for the user to respond, then restore the focus
#    and return the index of the selected button.
#

tkwait variable button
destroy .
exit $button

