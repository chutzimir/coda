#!/usr/coda/etc/wish -f
#ifndef _BLURB_
#define _BLURB_
#/*
#
#            Coda: an Experimental Distributed File System
#                             Release 4.0
#
#          Copyright (c) 1987-1996 Carnegie Mellon University
#                         All Rights Reserved
#
#Permission  to  use, copy, modify and distribute this software and its
#documentation is hereby granted,  provided  that  both  the  copyright
#notice  and  this  permission  notice  appear  in  all  copies  of the
#software, derivative works or  modified  versions,  and  any  portions
#thereof, and that both notices appear in supporting documentation, and
#that credit is given to Carnegie Mellon University  in  all  documents
#and publicity pertaining to direct or indirect use of this code or its
#derivatives.
#
#CODA IS AN EXPERIMENTAL SOFTWARE SYSTEM AND IS  KNOWN  TO  HAVE  BUGS,
#SOME  OF  WHICH MAY HAVE SERIOUS CONSEQUENCES.  CARNEGIE MELLON ALLOWS
#FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.   CARNEGIE  MELLON
#DISCLAIMS  ANY  LIABILITY  OF  ANY  KIND  FOR  ANY  DAMAGES WHATSOEVER
#RESULTING DIRECTLY OR INDIRECTLY FROM THE USE OF THIS SOFTWARE  OR  OF
#ANY DERIVATIVE WORK.
#
#Carnegie  Mellon  encourages  users  of  this  software  to return any
#improvements or extensions that  they  make,  and  to  grant  Carnegie
#Mellon the rights to redistribute these changes without encumbrance.
#*/
#
#static char *rcsid = "$Header$";
#endif /*_BLURB_*/


set redcolor red
set yellowcolor yellow
set greencolor green
set backgroundcolor gray
set offcolor black

proc disconnected {} {
  global redcolor
  global offcolor

  .c itemconfigure red -fill ${redcolor}
  .c itemconfigure yellow -fill ${offcolor}
  .c itemconfigure green -fill ${offcolor}
}

proc weaklyconnected {} {
  global yellowcolor
  global offcolor

  .c itemconfigure red -fill ${offcolor}
  .c itemconfigure yellow -fill ${yellowcolor}
  .c itemconfigure green -fill ${offcolor}
}

proc stronglyconnected {} {
  global greencolor
  global offcolor

  .c itemconfigure red -fill ${offcolor}
  .c itemconfigure yellow -fill ${offcolor}
  .c itemconfigure green -fill ${greencolor}
}

proc off {} {
  global greencolor
  global offcolor

  .c itemconfigure red -fill ${offcolor}
  .c itemconfigure yellow -fill ${offcolor}
  .c itemconfigure green -fill ${offcolor}
}

proc quit {} {
  after 1000 {ReallyQuit}
}

proc ReallyQuit {} {
  destroy .
  exit 0
}

#
# parse arguments
#
if { $argc > 0 } {set cellsize [lindex $argv 0]} else {set cellsize 10}

#
# initialize the stoplight
#

set width 25
set height [expr ${width}*3]
set border 1

set zero ${border}

set oneW ${width}
set twoW [expr ${width}*2]
set threeW [expr ${width}*3]

set oneB ${border}
set twoB [expr ${border}*2]
set threeB [expr ${border}*3]
set fourB [expr ${border}*4]
set fiveB [expr ${border}*5]
set sixB [expr ${border}*6]

wm geometry . -5+60

# The following doesn't do much...
wm minsize . [expr ${width}+${twoB}] [expr ${height}+${sixB}]

canvas .c -width [expr ${width}+${twoB}] -height [expr ${height}+ ${sixB}] 
pack .c

.c create rectangle 0 0 [expr ${width}+${twoB}] [expr ${height}+${sixB}] \
	 -outline ${backgroundcolor} -fill ${backgroundcolor}

# The red light
.c create oval ${border} ${border} [expr ${oneW}+${oneB}] [expr ${oneW}+${oneB}]   \
	-outline black -fill ${offcolor} -tags red

# The yellow light
.c create oval ${border} [expr ${oneW}+${threeB}] [expr ${oneW}+${oneB}] [expr ${twoW}+${threeB}] \
	-outline black -fill ${offcolor} -tags yellow

# The green light
.c create oval ${border} [expr ${twoW}+${fiveB}] [expr ${oneW}+${oneB}] [expr ${threeW}+${fiveB}] \
	-outline black -fill ${offcolor} -tags green

#disconnected
#after 5000 {weaklyconnected}
#after 10000 {stronglyconnected}

off



