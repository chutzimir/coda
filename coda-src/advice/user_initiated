#!/usr/coda/etc/wish -f
#ifndef _BLURB_
#define _BLURB_
#/*
#
#            Coda: an Experimental Distributed File System
#                             Release 4.0
#
#          Copyright (c) 1987-1996 Carnegie Mellon University
#                         All Rights Reserved
#
#Permission  to  use, copy, modify and distribute this software and its
#documentation is hereby granted,  provided  that  both  the  copyright
#notice  and  this  permission  notice  appear  in  all  copies  of the
#software, derivative works or  modified  versions,  and  any  portions
#thereof, and that both notices appear in supporting documentation, and
#that credit is given to Carnegie Mellon University  in  all  documents
#and publicity pertaining to direct or indirect use of this code or its
#derivatives.
#
#CODA IS AN EXPERIMENTAL SOFTWARE SYSTEM AND IS  KNOWN  TO  HAVE  BUGS,
#SOME  OF  WHICH MAY HAVE SERIOUS CONSEQUENCES.  CARNEGIE MELLON ALLOWS
#FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.   CARNEGIE  MELLON
#DISCLAIMS  ANY  LIABILITY  OF  ANY  KIND  FOR  ANY  DAMAGES WHATSOEVER
#RESULTING DIRECTLY OR INDIRECTLY FROM THE USE OF THIS SOFTWARE  OR  OF
#ANY DERIVATIVE WORK.
#
#Carnegie  Mellon  encourages  users  of  this  software  to return any
#improvements or extensions that  they  make,  and  to  grant  Carnegie
#Mellon the rights to redistribute these changes without encumbrance.
#*/
#
#static char *rcsid = "$Header$";
#endif /*_BLURB_*/


#
# A menu to pass user-initiated events up to the advice monitor
#
# History :
#  95/4/15 : mre@cs.cmu.edu : code
#

#
#
#

proc Quit {} {
	destroy .
	exit 0
}


#
# Routines for interacting with the advice monitor...  
# (These are common to all of the various options.)
#

proc CreateCommandFile {line} {
	global CommandFileName

	set outFile [open $CommandFileName w]
	puts $outFile [format "%s" $line]
	close $outFile
}

proc SignalAdviceMonitor {} {
	global argv

	# Set a USR1 signal to the advice monitor
	exec kill -USR1 [lindex $argv 0]
}

proc WaitForCommandFileRemoval {} {
	global CommandFileName

	set test [file exists $CommandFileName]
	while { $test == 1 } {
		# Command File still exists
		after 1000
		set test [file exists $CommandFileName]
	}
	# Command file has been removed
}


# 
# Routines for implementing the various options...
#

proc QuitAdvice {} {
	global QuitAdvice

	CreateCommandFile $QuitAdvice
	SignalAdviceMonitor
	WaitForCommandFileRemoval
	exit 0
}

proc UserPatienceParameters {} {

}

proc StopLightControl {} {
	global StopLight
	global BeginStopLight
	global EndStopLight

	if {$StopLight} {
		CreateCommandFile $BeginStopLight
	} else {
		CreateCommandFile $EndStopLight
	}

	SignalAdviceMonitor
	WaitForCommandFileRemoval	
}

proc RequestMissList {} {
	global RequestMissList 

	CreateCommandFile $RequestMissList
	SignalAdviceMonitor
	WaitForCommandFileRemoval
}

proc VenusStoppedHoardAdvice {} {
	global HoardWalkAdvice

	set HoardWalkAdvice 0
}

proc RequestHoardAdvice {} {
	global SolicitHoardAdvice
	global UnsolicitHoardAdvice
	global HoardWalkAdvice

	if {$HoardWalkAdvice} {
		CreateCommandFile $SolicitHoardAdvice
	} else {
		CreateCommandFile $UnsolicitHoardAdvice
	}

	SignalAdviceMonitor
	WaitForCommandFileRemoval
}

proc RequestDiscoMissQuestionnaires { } {
	global RequestDiscoMissQs 
	global UnrequestDiscoMissQs 
	global DiscoMissQuestionnaires

	if {$DiscoMissQuestionnaires} {
		CreateCommandFile $RequestDiscoMissQs 
	} else {
		CreateCommandFile $UnrequestDiscoMissQs 
	}

	SignalAdviceMonitor
	WaitForCommandFileRemoval
}

proc RequestLongFetchQueries { } {
	global RequestLongFetchQuery
	global UnrequestLongFetchQuery
	global LongFetchQueries

	if {$LongFetchQueries} {
		CreateCommandFile $RequestLongFetchQuery
	} else {
		CreateCommandFile $UnrequestLongFetchQuery
	}
	SignalAdviceMonitor
	WaitForCommandFileRemoval
}

proc CreateMenuBar {} {

;	frame .frame -relief flat 
;	pack append . .frame {top filly frame center}
;	frame .mbar -relief raised -borderwidth 2
;	pack before .frame .mbar {top fillx}

	pack append . .mbar {top}

	menubutton .mbar.file -text File -underline 0 -menu .mbar.file.menu
	menu .mbar.file.menu
	.mbar.file.menu add command \
		-label "Quit" \
		-command "QuitAdvice"

	menubutton .mbar.variables -text Variables -underline 0 -menu .mbar.variables.menu
	menu .mbar.variables.menu
	.mbar.variables.menu add command \
		-label "User Patience Parameters" \
		-command "UserPatienceParameters"


	menubutton .mbar.weakmiss -text WeakMiss -underline 0 -menu .mbar.weakmiss.menu
	menu .mbar.weakmiss.menu
	.mbar.weakmiss.menu add checkbutton \
		-label "Hoard Walk Advice" \
		-variable HoardWalkAdvice \
		-command RequestHoardAdvice
	.mbar.weakmiss.menu add checkbutton \
		-label "Long Fetch Queries" \
		-variable LongFetchQueries \
		-command RequestLongFetchQueries
	.mbar.weakmiss.menu add checkbutton \
		-label "Disconnected Cache Miss Questionnaires" \
		-variable DiscoMissQuestionnaires \
		-command RequestDiscoMissQuestionnaires
	.mbar.weakmiss.menu add separator
	.mbar.weakmiss.menu add command \
		-label "Request list of cache misses" \
		-command "RequestMissList"

	menubutton .mbar.monitors -text Monitors -underline 0 -menu .mbar.monitors.menu
	menu .mbar.monitors.menu
	.mbar.monitors.menu add checkbutton \
		-label "Stoplight" \
		-variable StopLight \
		-command StopLightControl

	pack append .mbar \
		.mbar.monitors {left} \
		.mbar.variables {left} \
		.mbar.weakmiss {left} 


	tk_menuBar .mbar .mbar.monitors .mbar.variables .mbar.weakmiss
	focus .mbar

}


#
# Check that we have precisely 1 arguments.
#

if { $argc != 1 } then {
	puts "Usage: user_initiaited pid"
	puts "  where pid is the process ID of the advice monitor"
	exit 1
}

# N.B. The following global variables MUST be consistent with those of 
# the same names found in advice_srv.h
set CommandFileName /tmp/advice_srv_command_file
set SolicitHoardAdvice a
set UnsolicitHoardAdvice b
set RequestMissList c
set RequestLongFetchQuery d
set BeginStopLight e
set EndStopLight f
set RequestDiscoMissQs g
set UnrequestDiscoMissQs h
set UnrequestLongFetchQuery i
set QuitAdvice q
# End of global variables which MUST be consistent with those in advice_srv.h

#
# Create all windows
#
CreateMenuBar

wm geometry . +0+0
wm title . "Advice Monitor"

#
# Now, wait for user actions...
#

