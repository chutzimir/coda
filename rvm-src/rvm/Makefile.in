#
#
#     RVM: an Experimental Recoverable Virtual Memory Package
#			Release 1.3
#
#       Copyright (c) 1990-1994 Carnegie Mellon University
#                      All Rights Reserved.
#
# Permission  to use, copy, modify and distribute this software and
# its documentation is hereby granted (including for commercial  or
# for-profit use), provided that both the copyright notice and this
# permission  notice  appear  in  all  copies  of   the   software,
# derivative  works or modified versions, and any portions thereof,
# and that both notices appear  in  supporting  documentation,  and
# that  credit  is  given  to  Carnegie  Mellon  University  in all
# publications reporting on direct or indirect use of this code  or
# its derivatives.
#
# RVM  IS  AN  EXPERIMENTAL  SOFTWARE  PACKAGE AND IS KNOWN TO HAVE
# BUGS, SOME OF WHICH MAY  HAVE  SERIOUS  CONSEQUENCES.    CARNEGIE
# MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.
# CARNEGIE MELLON DISCLAIMS ANY  LIABILITY  OF  ANY  KIND  FOR  ANY
# DAMAGES  WHATSOEVER RESULTING DIRECTLY OR INDIRECTLY FROM THE USE
# OF THIS SOFTWARE OR OF ANY DERIVATIVE WORK.
#
# Carnegie Mellon encourages (but does not require) users  of  this
# software to return any improvements or extensions that they make,
# and to grant Carnegie Mellon the  rights  to  redistribute  these
# changes  without  encumbrance.   Such improvements and extensions
# should be returned to Software.Distribution@cs.cmu.edu.
#
# rcsid = $Header$
#

TOPDIR = @top_srcdir@

srcdir = @srcdir@
VPATH  = @srcdir@
TOPOBJ = @TOPOBJ@

include $(TOPDIR)/Makeconf

# BSD platforms need libcompat.a for insque and deque
RVMUTL_LIBS = ${LIBCOMPAT} ${LIBTHREADS} ${LIBMACH}

EXPHEADERS  = rvm.h rvm_statistics.h rvm_lwp.h rvm_private.h \
              rvm_pthread.h
PRIVHEADERS = dummy_cthreads.h

LIBOBJ = rvm_init.o rvm_map.o rvm_unmap.o rvm_trans.o rvm_logstatus.o \
       rvm_logflush.o rvm_logrecovr.o rvm_utils.o rvm_io.o rvm_status.o \
       rvm_debug.o rvm_printers.o

OBJ = rvmutl.o

# Note: to build librvmlwp.a with debugging for the log tail bug,
# Use one of the two commented out targets instead.
#       RVM_LOG_TAIL_BUG uses page protection
#       -DRVM_LOG_TAIL_BUG
#       RVM_LOG_TAIL_SHADOW uses shadow variables
#       -DRVM_LOG_TAIL_SHADOW

#
# RVM can be built in 4 ways:
#  - cthreads
#               libs: must use libthreads.a and libmach.a
#               flags: 
#  - no threads (used by standalone rvm utilities in Coda
#		flags: none
#		libs: none
#                 library produced:  librvm.a
#  - lwp theads (used in Coda)
#		flags: -DRVM_USELWP
#		libs: 
#		library produced: librvmlwp.a
#  - pthreads



HERE := $(shell basename `pwd`)
ifeq ($(HERE),rvmlwp)
RVMTARGET := lwp
endif


ifeq ($(RVMTARGET),)
HEADERS     = ${EXPHEADERS} ${PRIVHEADERS}
LIBRARIES   = librvm.a
EXECUTABLES = rvmutl
SSBINS      = rvmutl
librvm.a: $(LIBOBJ)
rvmutl:  librvm.a ${OBJ}
	$(CC) $(LIBFLAGS) ${OBJ} librvm.a ${RVMUTL_LIBS} -o $@
endif

ifeq ($(RVMTARGET),lwp)
CFLAGS += -DRVM_USELWP

%.o : $(srcdir)/../rvm/%.c
	$(CC) $(CFLAGS) -c $< -o $@

LIBRARIES   = librvmlwp.a
librvmlwp.a: $(LIBOBJ)
endif

ifeq ($(RVMTARGET),cthreads)
CFLAGS += ....
LIBS += -lmach -lthreads
librvm.a:  $(NEED_CTHREAD) $(LIBOBJ)
endif

ifeq ($(RVMTARGET),pthreads)
LIBOBJ += rvm_pthread.o
librvmpt.a: $(LIBOBJ)
endif

include $(TOPDIR)/configs/Makerules
