# TARGETS:
#	install:
#		lock.h lwp.h lwp.camelot.h preempt.h timer.h cargs.h ->$(INCLSPECIAL)
#		liboldlwp.a -> $(LIBSPECIAL)
#		test rw -> $(BINDIR)
#	 all:
#		liboldlwp.a
#		test rw
#	unbuilt:
#		tdb libnewlwp.a newtest newrw neqtdb

#
#            Coda: an Experimental Distributed File System
#                             Release 4.0
#
#          Copyright (c) 1987-1996 Carnegie Mellon University
#                         All Rights Reserved
#
# Permission  to  use, copy, modify and distribute this software and its
# documentation is hereby granted,  provided  that  both  the  copyright
# notice  and  this  permission  notice  appear  in  all  copies  of the
# software, derivative works or  modified  versions,  and  any  portions
# thereof, and that both notices appear in supporting documentation, and
# that credit is given to Carnegie Mellon University  in  all  documents
# and publicity pertaining to direct or indirect use of this code or its
# derivatives.
#
# CODA IS AN EXPERIMENTAL SOFTWARE SYSTEM AND IS  KNOWN  TO  HAVE  BUGS,
# SOME  OF  WHICH MAY HAVE SERIOUS CONSEQUENCES.  CARNEGIE MELLON ALLOWS
# FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION.   CARNEGIE  MELLON
# DISCLAIMS  ANY  LIABILITY  OF  ANY  KIND  FOR  ANY  DAMAGES WHATSOEVER
# RESULTING DIRECTLY OR INDIRECTLY FROM THE USE OF THIS SOFTWARE  OR  OF
# ANY DERIVATIVE WORK.
#
# Carnegie  Mellon  encourages  users  of  this  software  to return any
# improvements or extensions that  they  make,  and  to  grant  Carnegie
# Mellon the rights to redistribute these changes without encumbrance.
#
# static char *rcsid = "$Header$";

TOPDIR = @top_srcdir@
ifndef MAKDIR
MAKDIR = @top_srcdir@
endif
srcdir = @srcdir@
VPATH  = @srcdir@
TOPOBJ = @TOPOBJ@

include $(MAKDIR)/Makeconf

# presto changeo!
SHOB_LIB_DIR := $(SHOB_LIB_SPECIAL)

LIBRARIES = liboldlwp.a
HEADERS   = lock.h lwp.h lwp.camelot.h preempt.h timer.h cargs.h
TESTS     = test rw  # tdb doesn't work yet

OLD_LIBS = liboldlwp.a $(LIBCOMPAT) 
NEW_LIBS = libnewlwp.a $(LIBCOMPAT)

OFILES = lwp.o lock.o iomgr.o timer.o fasttime.o preempt.o process.o
PRIVHFILES = lwp.private.h

# Flags for old or new lwp
oldFLAGS := -DOLDLWP
CFLAGS := -DLWPDEBUG $(CFLAGS) $(oldFLAGS)
AFLAGS := -DLWPDEBUG $(AFLAGS) $(oldFLAGS)

# Coda Installation
old: liboldlwp.a
liboldlwp.a: $(OFILES)

# Since we never use libnewlwp.a, don't compile it unless its asked for.
new: libnewlwp.a
# If building libnewlwp.a, clean up before and after yourself.
# also flush -DOLDLWP by overriding oldFLAGS
#libnewlwp.a: $(OFILES)
libnewlwp.a:
	$(RM) $(OFILES)
	$(MAKE) oldFLAGS= $(OFILES)
	$(AR) rv $@ $(OFILES)
	ranlib $@
	$(RM) $(OFILES)

# Confusion
confused:
	@echo "Type 'make old' for liboldlwp.a, and"
	@echo "Type 'make new' for libnewlwp.a."
	@exit 1

# Dependencies for object files
$(OFILES):  $(HEADERS) $(PRIVHFILES)

# Test programs
test:	test.o $(OLD_LIBS)
	${CC} ${LIBFLAGS} $(oldFLAGS) test.o $(OLD_LIBS) -o test

tdb:	tdb.o $(OLD_LIBS)
	$(CC) $(LIBFLAGS) $(oldFLAGS) tdb.o $(OLD_LIBS) -o tdb 

rw:	rw.o $(OLD_LIBS)
	$(CC) $(LIBFLAGS) $(oldFLAGS) rw.o $(OLD_LIBS) -o rw

newtest:test.o $(NEW_LIBS)
	rm test.o
	${CC} ${LIBFLAGS} test.o $(NEW_LIBS) -o newtest

neqtdb:	tdb.o $(NEW_LIBS)
	rm tdb.o
	$(CC) $(LIBFLAGS) tdb.o $(NEW_LIBS) -o newtdb 

newrw:	rw.o $(NEW_LIBS)
	rm rw.o
	$(CC) $(LIBFLAGS) rw.o $(NEW_LIBS) -o newrw

include $(MAKDIR)/configs/Makerules
